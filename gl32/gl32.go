package gl32

// #cgo darwin  LDFLAGS: -framework OpenGL
// #cgo linux   LDFLAGS: -lGL
// #cgo windows LDFLAGS: -lopengl32
//
// #include <stdlib.h>
// #ifdef __APPLE__
// #include <OpenGL/gl3.h>
// #else
// #include <GL/glew.h>
// #endif
import "C"
import "unsafe"

type (
	Enum     C.GLenum
	Boolean  C.GLboolean
	Bitfield C.GLbitfield
	Byte     C.GLbyte
	Short    C.GLshort
	Int      C.GLint
	Sizei    C.GLsizei
	Ubyte    C.GLubyte
	Ushort   C.GLushort
	Uint     C.GLuint
	Half     C.GLhalf
	Float    C.GLfloat
	Clampf   C.GLclampf
	Double   C.GLdouble
	Clampd   C.GLclampd
	Pointer  unsafe.Pointer
	Sync     C.GLsync
	Int64    C.GLint64
	Uint64   C.GLuint64
	Intptr   C.GLintptr
	Sizeiptr C.GLsizeiptr
)

type (
	Buffer            Uint
	VertexShader      Uint
	FragmentShader    Uint
	Texture           Uint
	VertexArrayObject Uint
	Program           Uint
	UniformLocation   Uint
	AttributeLocation Uint
)

// OpenGL 1.1
const (
	ALPHA                   = C.GL_ALPHA
	ALWAYS                  = C.GL_ALWAYS
	AND                     = C.GL_AND
	AND_INVERTED            = C.GL_AND_INVERTED
	AND_REVERSE             = C.GL_AND_REVERSE
	BACK                    = C.GL_BACK
	BACK_LEFT               = C.GL_BACK_LEFT
	BACK_RIGHT              = C.GL_BACK_RIGHT
	BLEND                   = C.GL_BLEND
	BLEND_DST               = C.GL_BLEND_DST
	BLEND_SRC               = C.GL_BLEND_SRC
	BLUE                    = C.GL_BLUE
	BYTE                    = C.GL_BYTE
	CCW                     = C.GL_CCW
	CLEAR                   = C.GL_CLEAR
	COLOR                   = C.GL_COLOR
	COLOR_BUFFER_BIT        = C.GL_COLOR_BUFFER_BIT
	COLOR_CLEAR_VALUE       = C.GL_COLOR_CLEAR_VALUE
	COLOR_LOGIC_OP          = C.GL_COLOR_LOGIC_OP
	COLOR_WRITEMASK         = C.GL_COLOR_WRITEMASK
	COPY                    = C.GL_COPY
	COPY_INVERTED           = C.GL_COPY_INVERTED
	CULL_FACE               = C.GL_CULL_FACE
	CULL_FACE_MODE          = C.GL_CULL_FACE_MODE
	CW                      = C.GL_CW
	DECR                    = C.GL_DECR
	DEPTH                   = C.GL_DEPTH
	DEPTH_BUFFER_BIT        = C.GL_DEPTH_BUFFER_BIT
	DEPTH_CLEAR_VALUE       = C.GL_DEPTH_CLEAR_VALUE
	DEPTH_COMPONENT         = C.GL_DEPTH_COMPONENT
	DEPTH_FUNC              = C.GL_DEPTH_FUNC
	DEPTH_RANGE             = C.GL_DEPTH_RANGE
	DEPTH_TEST              = C.GL_DEPTH_TEST
	DEPTH_WRITEMASK         = C.GL_DEPTH_WRITEMASK
	DITHER                  = C.GL_DITHER
	DONT_CARE               = C.GL_DONT_CARE
	DOUBLE                  = C.GL_DOUBLE
	DOUBLEBUFFER            = C.GL_DOUBLEBUFFER
	DRAW_BUFFER             = C.GL_DRAW_BUFFER
	DST_ALPHA               = C.GL_DST_ALPHA
	DST_COLOR               = C.GL_DST_COLOR
	EQUAL                   = C.GL_EQUAL
	EQUIV                   = C.GL_EQUIV
	EXTENSIONS              = C.GL_EXTENSIONS
	FALSE                   = C.GL_FALSE
	FASTEST                 = C.GL_FASTEST
	FILL                    = C.GL_FILL
	FLOAT                   = C.GL_FLOAT
	FRONT                   = C.GL_FRONT
	FRONT_AND_BACK          = C.GL_FRONT_AND_BACK
	FRONT_FACE              = C.GL_FRONT_FACE
	FRONT_LEFT              = C.GL_FRONT_LEFT
	FRONT_RIGHT             = C.GL_FRONT_RIGHT
	GEQUAL                  = C.GL_GEQUAL
	GREATER                 = C.GL_GREATER
	GREEN                   = C.GL_GREEN
	INCR                    = C.GL_INCR
	INT                     = C.GL_INT
	INVALID_ENUM            = C.GL_INVALID_ENUM
	INVALID_OPERATION       = C.GL_INVALID_OPERATION
	INVALID_VALUE           = C.GL_INVALID_VALUE
	INVERT                  = C.GL_INVERT
	KEEP                    = C.GL_KEEP
	LEFT                    = C.GL_LEFT
	LEQUAL                  = C.GL_LEQUAL
	LESS                    = C.GL_LESS
	LINE                    = C.GL_LINE
	LINEAR                  = C.GL_LINEAR
	LINEAR_MIPMAP_LINEAR    = C.GL_LINEAR_MIPMAP_LINEAR
	LINEAR_MIPMAP_NEAREST   = C.GL_LINEAR_MIPMAP_NEAREST
	LINES                   = C.GL_LINES
	LINE_LOOP               = C.GL_LINE_LOOP
	LINE_SMOOTH             = C.GL_LINE_SMOOTH
	LINE_SMOOTH_HINT        = C.GL_LINE_SMOOTH_HINT
	LINE_STRIP              = C.GL_LINE_STRIP
	LINE_WIDTH              = C.GL_LINE_WIDTH
	LINE_WIDTH_GRANULARITY  = C.GL_LINE_WIDTH_GRANULARITY
	LINE_WIDTH_RANGE        = C.GL_LINE_WIDTH_RANGE
	LOGIC_OP_MODE           = C.GL_LOGIC_OP_MODE
	MAX_TEXTURE_SIZE        = C.GL_MAX_TEXTURE_SIZE
	MAX_VIEWPORT_DIMS       = C.GL_MAX_VIEWPORT_DIMS
	NAND                    = C.GL_NAND
	NEAREST                 = C.GL_NEAREST
	NEAREST_MIPMAP_LINEAR   = C.GL_NEAREST_MIPMAP_LINEAR
	NEAREST_MIPMAP_NEAREST  = C.GL_NEAREST_MIPMAP_NEAREST
	NEVER                   = C.GL_NEVER
	NICEST                  = C.GL_NICEST
	NONE                    = C.GL_NONE
	NOOP                    = C.GL_NOOP
	NOR                     = C.GL_NOR
	NOTEQUAL                = C.GL_NOTEQUAL
	NO_ERROR                = C.GL_NO_ERROR
	ONE                     = C.GL_ONE
	ONE_MINUS_DST_ALPHA     = C.GL_ONE_MINUS_DST_ALPHA
	ONE_MINUS_DST_COLOR     = C.GL_ONE_MINUS_DST_COLOR
	ONE_MINUS_SRC_ALPHA     = C.GL_ONE_MINUS_SRC_ALPHA
	ONE_MINUS_SRC_COLOR     = C.GL_ONE_MINUS_SRC_COLOR
	OR                      = C.GL_OR
	OR_INVERTED             = C.GL_OR_INVERTED
	OR_REVERSE              = C.GL_OR_REVERSE
	OUT_OF_MEMORY           = C.GL_OUT_OF_MEMORY
	PACK_ALIGNMENT          = C.GL_PACK_ALIGNMENT
	PACK_LSB_FIRST          = C.GL_PACK_LSB_FIRST
	PACK_ROW_LENGTH         = C.GL_PACK_ROW_LENGTH
	PACK_SKIP_PIXELS        = C.GL_PACK_SKIP_PIXELS
	PACK_SKIP_ROWS          = C.GL_PACK_SKIP_ROWS
	PACK_SWAP_BYTES         = C.GL_PACK_SWAP_BYTES
	POINT                   = C.GL_POINT
	POINTS                  = C.GL_POINTS
	POINT_SIZE              = C.GL_POINT_SIZE
	POINT_SIZE_GRANULARITY  = C.GL_POINT_SIZE_GRANULARITY
	POINT_SIZE_RANGE        = C.GL_POINT_SIZE_RANGE
	POLYGON_OFFSET_FACTOR   = C.GL_POLYGON_OFFSET_FACTOR
	POLYGON_OFFSET_FILL     = C.GL_POLYGON_OFFSET_FILL
	POLYGON_OFFSET_LINE     = C.GL_POLYGON_OFFSET_LINE
	POLYGON_OFFSET_POINT    = C.GL_POLYGON_OFFSET_POINT
	POLYGON_OFFSET_UNITS    = C.GL_POLYGON_OFFSET_UNITS
	POLYGON_SMOOTH          = C.GL_POLYGON_SMOOTH
	POLYGON_SMOOTH_HINT     = C.GL_POLYGON_SMOOTH_HINT
	PROXY_TEXTURE_1D        = C.GL_PROXY_TEXTURE_1D
	PROXY_TEXTURE_2D        = C.GL_PROXY_TEXTURE_2D
	R3_G3_B2                = C.GL_R3_G3_B2
	READ_BUFFER             = C.GL_READ_BUFFER
	RED                     = C.GL_RED
	RENDERER                = C.GL_RENDERER
	REPEAT                  = C.GL_REPEAT
	REPLACE                 = C.GL_REPLACE
	RGB                     = C.GL_RGB
	RGB10                   = C.GL_RGB10
	RGB10_A2                = C.GL_RGB10_A2
	RGB12                   = C.GL_RGB12
	RGB16                   = C.GL_RGB16
	RGB4                    = C.GL_RGB4
	RGB5                    = C.GL_RGB5
	RGB5_A1                 = C.GL_RGB5_A1
	RGB8                    = C.GL_RGB8
	RGBA                    = C.GL_RGBA
	RGBA12                  = C.GL_RGBA12
	RGBA16                  = C.GL_RGBA16
	RGBA2                   = C.GL_RGBA2
	RGBA4                   = C.GL_RGBA4
	RGBA8                   = C.GL_RGBA8
	RIGHT                   = C.GL_RIGHT
	SCISSOR_BOX             = C.GL_SCISSOR_BOX
	SCISSOR_TEST            = C.GL_SCISSOR_TEST
	SET                     = C.GL_SET
	SHORT                   = C.GL_SHORT
	SRC_ALPHA               = C.GL_SRC_ALPHA
	SRC_ALPHA_SATURATE      = C.GL_SRC_ALPHA_SATURATE
	SRC_COLOR               = C.GL_SRC_COLOR
	STENCIL                 = C.GL_STENCIL
	STENCIL_BUFFER_BIT      = C.GL_STENCIL_BUFFER_BIT
	STENCIL_CLEAR_VALUE     = C.GL_STENCIL_CLEAR_VALUE
	STENCIL_FAIL            = C.GL_STENCIL_FAIL
	STENCIL_FUNC            = C.GL_STENCIL_FUNC
	STENCIL_INDEX           = C.GL_STENCIL_INDEX
	STENCIL_PASS_DEPTH_FAIL = C.GL_STENCIL_PASS_DEPTH_FAIL
	STENCIL_PASS_DEPTH_PASS = C.GL_STENCIL_PASS_DEPTH_PASS
	STENCIL_REF             = C.GL_STENCIL_REF
	STENCIL_TEST            = C.GL_STENCIL_TEST
	STENCIL_VALUE_MASK      = C.GL_STENCIL_VALUE_MASK
	STENCIL_WRITEMASK       = C.GL_STENCIL_WRITEMASK
	STEREO                  = C.GL_STEREO
	SUBPIXEL_BITS           = C.GL_SUBPIXEL_BITS
	TEXTURE                 = C.GL_TEXTURE
	TEXTURE_1D              = C.GL_TEXTURE_1D
	TEXTURE_2D              = C.GL_TEXTURE_2D
	TEXTURE_ALPHA_SIZE      = C.GL_TEXTURE_ALPHA_SIZE
	TEXTURE_BINDING_1D      = C.GL_TEXTURE_BINDING_1D
	TEXTURE_BINDING_2D      = C.GL_TEXTURE_BINDING_2D
	TEXTURE_BLUE_SIZE       = C.GL_TEXTURE_BLUE_SIZE
	TEXTURE_BORDER_COLOR    = C.GL_TEXTURE_BORDER_COLOR
	TEXTURE_GREEN_SIZE      = C.GL_TEXTURE_GREEN_SIZE
	TEXTURE_HEIGHT          = C.GL_TEXTURE_HEIGHT
	TEXTURE_INTERNAL_FORMAT = C.GL_TEXTURE_INTERNAL_FORMAT
	TEXTURE_MAG_FILTER      = C.GL_TEXTURE_MAG_FILTER
	TEXTURE_MIN_FILTER      = C.GL_TEXTURE_MIN_FILTER
	TEXTURE_RED_SIZE        = C.GL_TEXTURE_RED_SIZE
	TEXTURE_WIDTH           = C.GL_TEXTURE_WIDTH
	TEXTURE_WRAP_S          = C.GL_TEXTURE_WRAP_S
	TEXTURE_WRAP_T          = C.GL_TEXTURE_WRAP_T
	TRIANGLES               = C.GL_TRIANGLES
	TRIANGLE_FAN            = C.GL_TRIANGLE_FAN
	TRIANGLE_STRIP          = C.GL_TRIANGLE_STRIP
	TRUE                    = C.GL_TRUE
	UNPACK_ALIGNMENT        = C.GL_UNPACK_ALIGNMENT
	UNPACK_LSB_FIRST        = C.GL_UNPACK_LSB_FIRST
	UNPACK_ROW_LENGTH       = C.GL_UNPACK_ROW_LENGTH
	UNPACK_SKIP_PIXELS      = C.GL_UNPACK_SKIP_PIXELS
	UNPACK_SKIP_ROWS        = C.GL_UNPACK_SKIP_ROWS
	UNPACK_SWAP_BYTES       = C.GL_UNPACK_SWAP_BYTES
	UNSIGNED_BYTE           = C.GL_UNSIGNED_BYTE
	UNSIGNED_INT            = C.GL_UNSIGNED_INT
	UNSIGNED_SHORT          = C.GL_UNSIGNED_SHORT
	VENDOR                  = C.GL_VENDOR
	VERSION                 = C.GL_VERSION
	VIEWPORT                = C.GL_VIEWPORT
	XOR                     = C.GL_XOR
	ZERO                    = C.GL_ZERO
)

// VERSION_1_2
const (
	ALIASED_LINE_WIDTH_RANGE      = C.GL_ALIASED_LINE_WIDTH_RANGE
	BGR                           = C.GL_BGR
	BGRA                          = C.GL_BGRA
	CLAMP_TO_EDGE                 = C.GL_CLAMP_TO_EDGE
	MAX_3D_TEXTURE_SIZE           = C.GL_MAX_3D_TEXTURE_SIZE
	MAX_ELEMENTS_INDICES          = C.GL_MAX_ELEMENTS_INDICES
	MAX_ELEMENTS_VERTICES         = C.GL_MAX_ELEMENTS_VERTICES
	PACK_IMAGE_HEIGHT             = C.GL_PACK_IMAGE_HEIGHT
	PACK_SKIP_IMAGES              = C.GL_PACK_SKIP_IMAGES
	PROXY_TEXTURE_3D              = C.GL_PROXY_TEXTURE_3D
	SMOOTH_LINE_WIDTH_GRANULARITY = C.GL_SMOOTH_LINE_WIDTH_GRANULARITY
	SMOOTH_LINE_WIDTH_RANGE       = C.GL_SMOOTH_LINE_WIDTH_RANGE
	SMOOTH_POINT_SIZE_GRANULARITY = C.GL_SMOOTH_POINT_SIZE_GRANULARITY
	SMOOTH_POINT_SIZE_RANGE       = C.GL_SMOOTH_POINT_SIZE_RANGE
	TEXTURE_3D                    = C.GL_TEXTURE_3D
	TEXTURE_BASE_LEVEL            = C.GL_TEXTURE_BASE_LEVEL
	TEXTURE_BINDING_3D            = C.GL_TEXTURE_BINDING_3D
	TEXTURE_DEPTH                 = C.GL_TEXTURE_DEPTH
	TEXTURE_MAX_LEVEL             = C.GL_TEXTURE_MAX_LEVEL
	TEXTURE_MAX_LOD               = C.GL_TEXTURE_MAX_LOD
	TEXTURE_MIN_LOD               = C.GL_TEXTURE_MIN_LOD
	TEXTURE_WRAP_R                = C.GL_TEXTURE_WRAP_R
	UNPACK_IMAGE_HEIGHT           = C.GL_UNPACK_IMAGE_HEIGHT
	UNPACK_SKIP_IMAGES            = C.GL_UNPACK_SKIP_IMAGES
	UNSIGNED_BYTE_2_3_3_REV       = C.GL_UNSIGNED_BYTE_2_3_3_REV
	UNSIGNED_BYTE_3_3_2           = C.GL_UNSIGNED_BYTE_3_3_2
	UNSIGNED_INT_10_10_10_2       = C.GL_UNSIGNED_INT_10_10_10_2
	UNSIGNED_INT_2_10_10_10_REV   = C.GL_UNSIGNED_INT_2_10_10_10_REV
	UNSIGNED_INT_8_8_8_8          = C.GL_UNSIGNED_INT_8_8_8_8
	UNSIGNED_INT_8_8_8_8_REV      = C.GL_UNSIGNED_INT_8_8_8_8_REV
	UNSIGNED_SHORT_1_5_5_5_REV    = C.GL_UNSIGNED_SHORT_1_5_5_5_REV
	UNSIGNED_SHORT_4_4_4_4        = C.GL_UNSIGNED_SHORT_4_4_4_4
	UNSIGNED_SHORT_4_4_4_4_REV    = C.GL_UNSIGNED_SHORT_4_4_4_4_REV
	UNSIGNED_SHORT_5_5_5_1        = C.GL_UNSIGNED_SHORT_5_5_5_1
	UNSIGNED_SHORT_5_6_5          = C.GL_UNSIGNED_SHORT_5_6_5
	UNSIGNED_SHORT_5_6_5_REV      = C.GL_UNSIGNED_SHORT_5_6_5_REV
)

// OpenGL 1.3
const (
	ACTIVE_TEXTURE                 = C.GL_ACTIVE_TEXTURE
	CLAMP_TO_BORDER                = C.GL_CLAMP_TO_BORDER
	COMPRESSED_RGB                 = C.GL_COMPRESSED_RGB
	COMPRESSED_RGBA                = C.GL_COMPRESSED_RGBA
	COMPRESSED_TEXTURE_FORMATS     = C.GL_COMPRESSED_TEXTURE_FORMATS
	MAX_CUBE_MAP_TEXTURE_SIZE      = C.GL_MAX_CUBE_MAP_TEXTURE_SIZE
	MULTISAMPLE                    = C.GL_MULTISAMPLE
	NUM_COMPRESSED_TEXTURE_FORMATS = C.GL_NUM_COMPRESSED_TEXTURE_FORMATS
	PROXY_TEXTURE_CUBE_MAP         = C.GL_PROXY_TEXTURE_CUBE_MAP
	SAMPLES                        = C.GL_SAMPLES
	SAMPLE_ALPHA_TO_COVERAGE       = C.GL_SAMPLE_ALPHA_TO_COVERAGE
	SAMPLE_ALPHA_TO_ONE            = C.GL_SAMPLE_ALPHA_TO_ONE
	SAMPLE_BUFFERS                 = C.GL_SAMPLE_BUFFERS
	SAMPLE_COVERAGE                = C.GL_SAMPLE_COVERAGE
	SAMPLE_COVERAGE_INVERT         = C.GL_SAMPLE_COVERAGE_INVERT
	SAMPLE_COVERAGE_VALUE          = C.GL_SAMPLE_COVERAGE_VALUE
	TEXTURE0                       = C.GL_TEXTURE0
	TEXTURE1                       = C.GL_TEXTURE1
	TEXTURE10                      = C.GL_TEXTURE10
	TEXTURE11                      = C.GL_TEXTURE11
	TEXTURE12                      = C.GL_TEXTURE12
	TEXTURE13                      = C.GL_TEXTURE13
	TEXTURE14                      = C.GL_TEXTURE14
	TEXTURE15                      = C.GL_TEXTURE15
	TEXTURE16                      = C.GL_TEXTURE16
	TEXTURE17                      = C.GL_TEXTURE17
	TEXTURE18                      = C.GL_TEXTURE18
	TEXTURE19                      = C.GL_TEXTURE19
	TEXTURE2                       = C.GL_TEXTURE2
	TEXTURE20                      = C.GL_TEXTURE20
	TEXTURE21                      = C.GL_TEXTURE21
	TEXTURE22                      = C.GL_TEXTURE22
	TEXTURE23                      = C.GL_TEXTURE23
	TEXTURE24                      = C.GL_TEXTURE24
	TEXTURE25                      = C.GL_TEXTURE25
	TEXTURE26                      = C.GL_TEXTURE26
	TEXTURE27                      = C.GL_TEXTURE27
	TEXTURE28                      = C.GL_TEXTURE28
	TEXTURE29                      = C.GL_TEXTURE29
	TEXTURE3                       = C.GL_TEXTURE3
	TEXTURE30                      = C.GL_TEXTURE30
	TEXTURE31                      = C.GL_TEXTURE31
	TEXTURE4                       = C.GL_TEXTURE4
	TEXTURE5                       = C.GL_TEXTURE5
	TEXTURE6                       = C.GL_TEXTURE6
	TEXTURE7                       = C.GL_TEXTURE7
	TEXTURE8                       = C.GL_TEXTURE8
	TEXTURE9                       = C.GL_TEXTURE9
	TEXTURE_BINDING_CUBE_MAP       = C.GL_TEXTURE_BINDING_CUBE_MAP
	TEXTURE_COMPRESSED             = C.GL_TEXTURE_COMPRESSED
	TEXTURE_COMPRESSED_IMAGE_SIZE  = C.GL_TEXTURE_COMPRESSED_IMAGE_SIZE
	TEXTURE_COMPRESSION_HINT       = C.GL_TEXTURE_COMPRESSION_HINT
	TEXTURE_CUBE_MAP               = C.GL_TEXTURE_CUBE_MAP
	TEXTURE_CUBE_MAP_NEGATIVE_X    = C.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
	TEXTURE_CUBE_MAP_NEGATIVE_Y    = C.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
	TEXTURE_CUBE_MAP_NEGATIVE_Z    = C.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
	TEXTURE_CUBE_MAP_POSITIVE_X    = C.GL_TEXTURE_CUBE_MAP_POSITIVE_X
	TEXTURE_CUBE_MAP_POSITIVE_Y    = C.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
	TEXTURE_CUBE_MAP_POSITIVE_Z    = C.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
)

// OpenGL 1.4
const (
	BLEND_DST_ALPHA           = C.GL_BLEND_DST_ALPHA
	BLEND_DST_RGB             = C.GL_BLEND_DST_RGB
	BLEND_SRC_ALPHA           = C.GL_BLEND_SRC_ALPHA
	BLEND_SRC_RGB             = C.GL_BLEND_SRC_RGB
	DECR_WRAP                 = C.GL_DECR_WRAP
	DEPTH_COMPONENT16         = C.GL_DEPTH_COMPONENT16
	DEPTH_COMPONENT24         = C.GL_DEPTH_COMPONENT24
	DEPTH_COMPONENT32         = C.GL_DEPTH_COMPONENT32
	INCR_WRAP                 = C.GL_INCR_WRAP
	MAX_TEXTURE_LOD_BIAS      = C.GL_MAX_TEXTURE_LOD_BIAS
	MIRRORED_REPEAT           = C.GL_MIRRORED_REPEAT
	POINT_FADE_THRESHOLD_SIZE = C.GL_POINT_FADE_THRESHOLD_SIZE
	TEXTURE_COMPARE_FUNC      = C.GL_TEXTURE_COMPARE_FUNC
	TEXTURE_COMPARE_MODE      = C.GL_TEXTURE_COMPARE_MODE
	TEXTURE_DEPTH_SIZE        = C.GL_TEXTURE_DEPTH_SIZE
	TEXTURE_LOD_BIAS          = C.GL_TEXTURE_LOD_BIAS
)

// OpenGL 1.5
const (
	ARRAY_BUFFER                       = C.GL_ARRAY_BUFFER
	ARRAY_BUFFER_BINDING               = C.GL_ARRAY_BUFFER_BINDING
	BUFFER_ACCESS                      = C.GL_BUFFER_ACCESS
	BUFFER_MAPPED                      = C.GL_BUFFER_MAPPED
	BUFFER_MAP_POINTER                 = C.GL_BUFFER_MAP_POINTER
	BUFFER_SIZE                        = C.GL_BUFFER_SIZE
	BUFFER_USAGE                       = C.GL_BUFFER_USAGE
	CURRENT_QUERY                      = C.GL_CURRENT_QUERY
	DYNAMIC_COPY                       = C.GL_DYNAMIC_COPY
	DYNAMIC_DRAW                       = C.GL_DYNAMIC_DRAW
	DYNAMIC_READ                       = C.GL_DYNAMIC_READ
	ELEMENT_ARRAY_BUFFER               = C.GL_ELEMENT_ARRAY_BUFFER
	ELEMENT_ARRAY_BUFFER_BINDING       = C.GL_ELEMENT_ARRAY_BUFFER_BINDING
	QUERY_COUNTER_BITS                 = C.GL_QUERY_COUNTER_BITS
	QUERY_RESULT                       = C.GL_QUERY_RESULT
	QUERY_RESULT_AVAILABLE             = C.GL_QUERY_RESULT_AVAILABLE
	READ_ONLY                          = C.GL_READ_ONLY
	READ_WRITE                         = C.GL_READ_WRITE
	SAMPLES_PASSED                     = C.GL_SAMPLES_PASSED
	STATIC_COPY                        = C.GL_STATIC_COPY
	STATIC_DRAW                        = C.GL_STATIC_DRAW
	STATIC_READ                        = C.GL_STATIC_READ
	STREAM_COPY                        = C.GL_STREAM_COPY
	STREAM_DRAW                        = C.GL_STREAM_DRAW
	STREAM_READ                        = C.GL_STREAM_READ
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = C.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
	WRITE_ONLY                         = C.GL_WRITE_ONLY
)

// OpenGL 2.0
const (
	ACTIVE_ATTRIBUTES                = C.GL_ACTIVE_ATTRIBUTES
	ACTIVE_ATTRIBUTE_MAX_LENGTH      = C.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
	ACTIVE_UNIFORMS                  = C.GL_ACTIVE_UNIFORMS
	ACTIVE_UNIFORM_MAX_LENGTH        = C.GL_ACTIVE_UNIFORM_MAX_LENGTH
	ATTACHED_SHADERS                 = C.GL_ATTACHED_SHADERS
	BLEND_EQUATION_ALPHA             = C.GL_BLEND_EQUATION_ALPHA
	BLEND_EQUATION_RGB               = C.GL_BLEND_EQUATION_RGB
	BOOL                             = C.GL_BOOL
	BOOL_VEC2                        = C.GL_BOOL_VEC2
	BOOL_VEC3                        = C.GL_BOOL_VEC3
	BOOL_VEC4                        = C.GL_BOOL_VEC4
	COMPILE_STATUS                   = C.GL_COMPILE_STATUS
	CURRENT_PROGRAM                  = C.GL_CURRENT_PROGRAM
	CURRENT_VERTEX_ATTRIB            = C.GL_CURRENT_VERTEX_ATTRIB
	DELETE_STATUS                    = C.GL_DELETE_STATUS
	DRAW_BUFFER0                     = C.GL_DRAW_BUFFER0
	DRAW_BUFFER1                     = C.GL_DRAW_BUFFER1
	DRAW_BUFFER10                    = C.GL_DRAW_BUFFER10
	DRAW_BUFFER11                    = C.GL_DRAW_BUFFER11
	DRAW_BUFFER12                    = C.GL_DRAW_BUFFER12
	DRAW_BUFFER13                    = C.GL_DRAW_BUFFER13
	DRAW_BUFFER14                    = C.GL_DRAW_BUFFER14
	DRAW_BUFFER15                    = C.GL_DRAW_BUFFER15
	DRAW_BUFFER2                     = C.GL_DRAW_BUFFER2
	DRAW_BUFFER3                     = C.GL_DRAW_BUFFER3
	DRAW_BUFFER4                     = C.GL_DRAW_BUFFER4
	DRAW_BUFFER5                     = C.GL_DRAW_BUFFER5
	DRAW_BUFFER6                     = C.GL_DRAW_BUFFER6
	DRAW_BUFFER7                     = C.GL_DRAW_BUFFER7
	DRAW_BUFFER8                     = C.GL_DRAW_BUFFER8
	DRAW_BUFFER9                     = C.GL_DRAW_BUFFER9
	FLOAT_MAT2                       = C.GL_FLOAT_MAT2
	FLOAT_MAT3                       = C.GL_FLOAT_MAT3
	FLOAT_MAT4                       = C.GL_FLOAT_MAT4
	FLOAT_VEC2                       = C.GL_FLOAT_VEC2
	FLOAT_VEC3                       = C.GL_FLOAT_VEC3
	FLOAT_VEC4                       = C.GL_FLOAT_VEC4
	FRAGMENT_SHADER                  = C.GL_FRAGMENT_SHADER
	FRAGMENT_SHADER_DERIVATIVE_HINT  = C.GL_FRAGMENT_SHADER_DERIVATIVE_HINT
	INFO_LOG_LENGTH                  = C.GL_INFO_LOG_LENGTH
	INT_VEC2                         = C.GL_INT_VEC2
	INT_VEC3                         = C.GL_INT_VEC3
	INT_VEC4                         = C.GL_INT_VEC4
	LINK_STATUS                      = C.GL_LINK_STATUS
	LOWER_LEFT                       = C.GL_LOWER_LEFT
	MAX_COMBINED_TEXTURE_IMAGE_UNITS = C.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
	MAX_DRAW_BUFFERS                 = C.GL_MAX_DRAW_BUFFERS
	MAX_FRAGMENT_UNIFORM_COMPONENTS  = C.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
	MAX_TEXTURE_IMAGE_UNITS          = C.GL_MAX_TEXTURE_IMAGE_UNITS
	MAX_VARYING_FLOATS               = C.GL_MAX_VARYING_FLOATS
	MAX_VERTEX_ATTRIBS               = C.GL_MAX_VERTEX_ATTRIBS
	MAX_VERTEX_TEXTURE_IMAGE_UNITS   = C.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
	MAX_VERTEX_UNIFORM_COMPONENTS    = C.GL_MAX_VERTEX_UNIFORM_COMPONENTS
	POINT_SPRITE_COORD_ORIGIN        = C.GL_POINT_SPRITE_COORD_ORIGIN
	SAMPLER_1D                       = C.GL_SAMPLER_1D
	SAMPLER_1D_SHADOW                = C.GL_SAMPLER_1D_SHADOW
	SAMPLER_2D                       = C.GL_SAMPLER_2D
	SAMPLER_2D_SHADOW                = C.GL_SAMPLER_2D_SHADOW
	SAMPLER_3D                       = C.GL_SAMPLER_3D
	SAMPLER_CUBE                     = C.GL_SAMPLER_CUBE
	SHADER_SOURCE_LENGTH             = C.GL_SHADER_SOURCE_LENGTH
	SHADER_TYPE                      = C.GL_SHADER_TYPE
	SHADING_LANGUAGE_VERSION         = C.GL_SHADING_LANGUAGE_VERSION
	STENCIL_BACK_FAIL                = C.GL_STENCIL_BACK_FAIL
	STENCIL_BACK_FUNC                = C.GL_STENCIL_BACK_FUNC
	STENCIL_BACK_PASS_DEPTH_FAIL     = C.GL_STENCIL_BACK_PASS_DEPTH_FAIL
	STENCIL_BACK_PASS_DEPTH_PASS     = C.GL_STENCIL_BACK_PASS_DEPTH_PASS
	STENCIL_BACK_REF                 = C.GL_STENCIL_BACK_REF
	STENCIL_BACK_VALUE_MASK          = C.GL_STENCIL_BACK_VALUE_MASK
	STENCIL_BACK_WRITEMASK           = C.GL_STENCIL_BACK_WRITEMASK
	UPPER_LEFT                       = C.GL_UPPER_LEFT
	VALIDATE_STATUS                  = C.GL_VALIDATE_STATUS
	VERTEX_ATTRIB_ARRAY_ENABLED      = C.GL_VERTEX_ATTRIB_ARRAY_ENABLED
	VERTEX_ATTRIB_ARRAY_NORMALIZED   = C.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
	VERTEX_ATTRIB_ARRAY_POINTER      = C.GL_VERTEX_ATTRIB_ARRAY_POINTER
	VERTEX_ATTRIB_ARRAY_SIZE         = C.GL_VERTEX_ATTRIB_ARRAY_SIZE
	VERTEX_ATTRIB_ARRAY_STRIDE       = C.GL_VERTEX_ATTRIB_ARRAY_STRIDE
	VERTEX_ATTRIB_ARRAY_TYPE         = C.GL_VERTEX_ATTRIB_ARRAY_TYPE
	VERTEX_PROGRAM_POINT_SIZE        = C.GL_VERTEX_PROGRAM_POINT_SIZE
	VERTEX_SHADER                    = C.GL_VERTEX_SHADER
)

// OpenGL 2.1
const (
	COMPRESSED_SRGB             = C.GL_COMPRESSED_SRGB
	COMPRESSED_SRGB_ALPHA       = C.GL_COMPRESSED_SRGB_ALPHA
	FLOAT_MAT2x3                = C.GL_FLOAT_MAT2x3
	FLOAT_MAT2x4                = C.GL_FLOAT_MAT2x4
	FLOAT_MAT3x2                = C.GL_FLOAT_MAT3x2
	FLOAT_MAT3x4                = C.GL_FLOAT_MAT3x4
	FLOAT_MAT4x2                = C.GL_FLOAT_MAT4x2
	FLOAT_MAT4x3                = C.GL_FLOAT_MAT4x3
	PIXEL_PACK_BUFFER           = C.GL_PIXEL_PACK_BUFFER
	PIXEL_PACK_BUFFER_BINDING   = C.GL_PIXEL_PACK_BUFFER_BINDING
	PIXEL_UNPACK_BUFFER         = C.GL_PIXEL_UNPACK_BUFFER
	PIXEL_UNPACK_BUFFER_BINDING = C.GL_PIXEL_UNPACK_BUFFER_BINDING
	SRGB                        = C.GL_SRGB
	SRGB8                       = C.GL_SRGB8
	SRGB8_ALPHA8                = C.GL_SRGB8_ALPHA8
	SRGB_ALPHA                  = C.GL_SRGB_ALPHA
)

// OpenGL 3.0
const (
	BGRA_INTEGER                                  = C.GL_BGRA_INTEGER
	BGR_INTEGER                                   = C.GL_BGR_INTEGER
	BLUE_INTEGER                                  = C.GL_BLUE_INTEGER
	BUFFER_ACCESS_FLAGS                           = C.GL_BUFFER_ACCESS_FLAGS
	BUFFER_MAP_LENGTH                             = C.GL_BUFFER_MAP_LENGTH
	BUFFER_MAP_OFFSET                             = C.GL_BUFFER_MAP_OFFSET
	CLAMP_READ_COLOR                              = C.GL_CLAMP_READ_COLOR
	CLIP_DISTANCE0                                = C.GL_CLIP_DISTANCE0
	CLIP_DISTANCE1                                = C.GL_CLIP_DISTANCE1
	CLIP_DISTANCE2                                = C.GL_CLIP_DISTANCE2
	CLIP_DISTANCE3                                = C.GL_CLIP_DISTANCE3
	CLIP_DISTANCE4                                = C.GL_CLIP_DISTANCE4
	CLIP_DISTANCE5                                = C.GL_CLIP_DISTANCE5
   // CLIP_DISTANCE6                                = C.GL_CLIP_DISTANCE6
   // CLIP_DISTANCE7                                = C.GL_CLIP_DISTANCE7
	COLOR_ATTACHMENT0                             = C.GL_COLOR_ATTACHMENT0
	COLOR_ATTACHMENT1                             = C.GL_COLOR_ATTACHMENT1
	COLOR_ATTACHMENT10                            = C.GL_COLOR_ATTACHMENT10
	COLOR_ATTACHMENT11                            = C.GL_COLOR_ATTACHMENT11
	COLOR_ATTACHMENT12                            = C.GL_COLOR_ATTACHMENT12
	COLOR_ATTACHMENT13                            = C.GL_COLOR_ATTACHMENT13
	COLOR_ATTACHMENT14                            = C.GL_COLOR_ATTACHMENT14
	COLOR_ATTACHMENT15                            = C.GL_COLOR_ATTACHMENT15
	COLOR_ATTACHMENT2                             = C.GL_COLOR_ATTACHMENT2
	COLOR_ATTACHMENT3                             = C.GL_COLOR_ATTACHMENT3
	COLOR_ATTACHMENT4                             = C.GL_COLOR_ATTACHMENT4
	COLOR_ATTACHMENT5                             = C.GL_COLOR_ATTACHMENT5
	COLOR_ATTACHMENT6                             = C.GL_COLOR_ATTACHMENT6
	COLOR_ATTACHMENT7                             = C.GL_COLOR_ATTACHMENT7
	COLOR_ATTACHMENT8                             = C.GL_COLOR_ATTACHMENT8
	COLOR_ATTACHMENT9                             = C.GL_COLOR_ATTACHMENT9
	COMPARE_REF_TO_TEXTURE                        = C.GL_COMPARE_REF_TO_TEXTURE
	COMPRESSED_RED                                = C.GL_COMPRESSED_RED
	COMPRESSED_RED_RGTC1                          = C.GL_COMPRESSED_RED_RGTC1
	COMPRESSED_RG                                 = C.GL_COMPRESSED_RG
	COMPRESSED_RG_RGTC2                           = C.GL_COMPRESSED_RG_RGTC2
	COMPRESSED_SIGNED_RED_RGTC1                   = C.GL_COMPRESSED_SIGNED_RED_RGTC1
	COMPRESSED_SIGNED_RG_RGTC2                    = C.GL_COMPRESSED_SIGNED_RG_RGTC2
	CONTEXT_FLAGS                                 = C.GL_CONTEXT_FLAGS
	CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT           = C.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
	DEPTH24_STENCIL8                              = C.GL_DEPTH24_STENCIL8
	DEPTH32F_STENCIL8                             = C.GL_DEPTH32F_STENCIL8
	DEPTH_ATTACHMENT                              = C.GL_DEPTH_ATTACHMENT
	DEPTH_COMPONENT32F                            = C.GL_DEPTH_COMPONENT32F
	DEPTH_STENCIL                                 = C.GL_DEPTH_STENCIL
	DEPTH_STENCIL_ATTACHMENT                      = C.GL_DEPTH_STENCIL_ATTACHMENT
	DRAW_FRAMEBUFFER                              = C.GL_DRAW_FRAMEBUFFER
	DRAW_FRAMEBUFFER_BINDING                      = C.GL_DRAW_FRAMEBUFFER_BINDING
	FIXED_ONLY                                    = C.GL_FIXED_ONLY
	FLOAT_32_UNSIGNED_INT_24_8_REV                = C.GL_FLOAT_32_UNSIGNED_INT_24_8_REV
	FRAMEBUFFER                                   = C.GL_FRAMEBUFFER
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE             = C.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE              = C.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING         = C.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE         = C.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE             = C.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE             = C.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME            = C.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE            = C.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
	FRAMEBUFFER_ATTACHMENT_RED_SIZE               = C.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE           = C.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE  = C.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER          = C.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL          = C.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
	FRAMEBUFFER_BINDING                           = C.GL_FRAMEBUFFER_BINDING
	FRAMEBUFFER_COMPLETE                          = C.GL_FRAMEBUFFER_COMPLETE
	FRAMEBUFFER_DEFAULT                           = C.GL_FRAMEBUFFER_DEFAULT
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT             = C.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER            = C.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT     = C.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE            = C.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER            = C.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
	FRAMEBUFFER_SRGB                              = C.GL_FRAMEBUFFER_SRGB
	FRAMEBUFFER_UNDEFINED                         = C.GL_FRAMEBUFFER_UNDEFINED
	FRAMEBUFFER_UNSUPPORTED                       = C.GL_FRAMEBUFFER_UNSUPPORTED
	GREEN_INTEGER                                 = C.GL_GREEN_INTEGER
	HALF_FLOAT                                    = C.GL_HALF_FLOAT
	INTERLEAVED_ATTRIBS                           = C.GL_INTERLEAVED_ATTRIBS
	INT_SAMPLER_1D                                = C.GL_INT_SAMPLER_1D
	INT_SAMPLER_1D_ARRAY                          = C.GL_INT_SAMPLER_1D_ARRAY
	INT_SAMPLER_2D                                = C.GL_INT_SAMPLER_2D
	INT_SAMPLER_2D_ARRAY                          = C.GL_INT_SAMPLER_2D_ARRAY
	INT_SAMPLER_3D                                = C.GL_INT_SAMPLER_3D
	INT_SAMPLER_CUBE                              = C.GL_INT_SAMPLER_CUBE
	INVALID_FRAMEBUFFER_OPERATION                 = C.GL_INVALID_FRAMEBUFFER_OPERATION
	MAJOR_VERSION                                 = C.GL_MAJOR_VERSION
	MAP_FLUSH_EXPLICIT_BIT                        = C.GL_MAP_FLUSH_EXPLICIT_BIT
	MAP_INVALIDATE_BUFFER_BIT                     = C.GL_MAP_INVALIDATE_BUFFER_BIT
	MAP_INVALIDATE_RANGE_BIT                      = C.GL_MAP_INVALIDATE_RANGE_BIT
	MAP_READ_BIT                                  = C.GL_MAP_READ_BIT
	MAP_UNSYNCHRONIZED_BIT                        = C.GL_MAP_UNSYNCHRONIZED_BIT
	MAP_WRITE_BIT                                 = C.GL_MAP_WRITE_BIT
	MAX_ARRAY_TEXTURE_LAYERS                      = C.GL_MAX_ARRAY_TEXTURE_LAYERS
	MAX_CLIP_DISTANCES                            = C.GL_MAX_CLIP_DISTANCES
	MAX_COLOR_ATTACHMENTS                         = C.GL_MAX_COLOR_ATTACHMENTS
	MAX_PROGRAM_TEXEL_OFFSET                      = C.GL_MAX_PROGRAM_TEXEL_OFFSET
	MAX_RENDERBUFFER_SIZE                         = C.GL_MAX_RENDERBUFFER_SIZE
	MAX_SAMPLES                                   = C.GL_MAX_SAMPLES
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = C.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       = C.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    = C.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
	MAX_VARYING_COMPONENTS                        = C.GL_MAX_VARYING_COMPONENTS
	MINOR_VERSION                                 = C.GL_MINOR_VERSION
	MIN_PROGRAM_TEXEL_OFFSET                      = C.GL_MIN_PROGRAM_TEXEL_OFFSET
	NUM_EXTENSIONS                                = C.GL_NUM_EXTENSIONS
	PRIMITIVES_GENERATED                          = C.GL_PRIMITIVES_GENERATED
	PROXY_TEXTURE_1D_ARRAY                        = C.GL_PROXY_TEXTURE_1D_ARRAY
	PROXY_TEXTURE_2D_ARRAY                        = C.GL_PROXY_TEXTURE_2D_ARRAY
	QUERY_BY_REGION_NO_WAIT                       = C.GL_QUERY_BY_REGION_NO_WAIT
	QUERY_BY_REGION_WAIT                          = C.GL_QUERY_BY_REGION_WAIT
	QUERY_NO_WAIT                                 = C.GL_QUERY_NO_WAIT
	QUERY_WAIT                                    = C.GL_QUERY_WAIT
	R11F_G11F_B10F                                = C.GL_R11F_G11F_B10F
	R16                                           = C.GL_R16
	R16F                                          = C.GL_R16F
	R16I                                          = C.GL_R16I
	R16UI                                         = C.GL_R16UI
	R32F                                          = C.GL_R32F
	R32I                                          = C.GL_R32I
	R32UI                                         = C.GL_R32UI
	R8                                            = C.GL_R8
	R8I                                           = C.GL_R8I
	R8UI                                          = C.GL_R8UI
	RASTERIZER_DISCARD                            = C.GL_RASTERIZER_DISCARD
	READ_FRAMEBUFFER                              = C.GL_READ_FRAMEBUFFER
	READ_FRAMEBUFFER_BINDING                      = C.GL_READ_FRAMEBUFFER_BINDING
	RED_INTEGER                                   = C.GL_RED_INTEGER
	RENDERBUFFER                                  = C.GL_RENDERBUFFER
	RENDERBUFFER_ALPHA_SIZE                       = C.GL_RENDERBUFFER_ALPHA_SIZE
	RENDERBUFFER_BINDING                          = C.GL_RENDERBUFFER_BINDING
	RENDERBUFFER_BLUE_SIZE                        = C.GL_RENDERBUFFER_BLUE_SIZE
	RENDERBUFFER_DEPTH_SIZE                       = C.GL_RENDERBUFFER_DEPTH_SIZE
	RENDERBUFFER_GREEN_SIZE                       = C.GL_RENDERBUFFER_GREEN_SIZE
	RENDERBUFFER_HEIGHT                           = C.GL_RENDERBUFFER_HEIGHT
	RENDERBUFFER_INTERNAL_FORMAT                  = C.GL_RENDERBUFFER_INTERNAL_FORMAT
	RENDERBUFFER_RED_SIZE                         = C.GL_RENDERBUFFER_RED_SIZE
	RENDERBUFFER_SAMPLES                          = C.GL_RENDERBUFFER_SAMPLES
	RENDERBUFFER_STENCIL_SIZE                     = C.GL_RENDERBUFFER_STENCIL_SIZE
	RENDERBUFFER_WIDTH                            = C.GL_RENDERBUFFER_WIDTH
	RG                                            = C.GL_RG
	RG16                                          = C.GL_RG16
	RG16F                                         = C.GL_RG16F
	RG16I                                         = C.GL_RG16I
	RG16UI                                        = C.GL_RG16UI
	RG32F                                         = C.GL_RG32F
	RG32I                                         = C.GL_RG32I
	RG32UI                                        = C.GL_RG32UI
	RG8                                           = C.GL_RG8
	RG8I                                          = C.GL_RG8I
	RG8UI                                         = C.GL_RG8UI
	RGB16F                                        = C.GL_RGB16F
	RGB16I                                        = C.GL_RGB16I
	RGB16UI                                       = C.GL_RGB16UI
	RGB32F                                        = C.GL_RGB32F
	RGB32I                                        = C.GL_RGB32I
	RGB32UI                                       = C.GL_RGB32UI
	RGB8I                                         = C.GL_RGB8I
	RGB8UI                                        = C.GL_RGB8UI
	RGB9_E5                                       = C.GL_RGB9_E5
	RGBA16F                                       = C.GL_RGBA16F
	RGBA16I                                       = C.GL_RGBA16I
	RGBA16UI                                      = C.GL_RGBA16UI
	RGBA32F                                       = C.GL_RGBA32F
	RGBA32I                                       = C.GL_RGBA32I
	RGBA32UI                                      = C.GL_RGBA32UI
	RGBA8I                                        = C.GL_RGBA8I
	RGBA8UI                                       = C.GL_RGBA8UI
	RGBA_INTEGER                                  = C.GL_RGBA_INTEGER
	RGB_INTEGER                                   = C.GL_RGB_INTEGER
	RG_INTEGER                                    = C.GL_RG_INTEGER
	SAMPLER_1D_ARRAY                              = C.GL_SAMPLER_1D_ARRAY
	SAMPLER_1D_ARRAY_SHADOW                       = C.GL_SAMPLER_1D_ARRAY_SHADOW
	SAMPLER_2D_ARRAY                              = C.GL_SAMPLER_2D_ARRAY
	SAMPLER_2D_ARRAY_SHADOW                       = C.GL_SAMPLER_2D_ARRAY_SHADOW
	SAMPLER_CUBE_SHADOW                           = C.GL_SAMPLER_CUBE_SHADOW
	SEPARATE_ATTRIBS                              = C.GL_SEPARATE_ATTRIBS
	STENCIL_ATTACHMENT                            = C.GL_STENCIL_ATTACHMENT
	STENCIL_INDEX1                                = C.GL_STENCIL_INDEX1
	STENCIL_INDEX16                               = C.GL_STENCIL_INDEX16
	STENCIL_INDEX4                                = C.GL_STENCIL_INDEX4
	STENCIL_INDEX8                                = C.GL_STENCIL_INDEX8
	TEXTURE_1D_ARRAY                              = C.GL_TEXTURE_1D_ARRAY
	TEXTURE_2D_ARRAY                              = C.GL_TEXTURE_2D_ARRAY
	TEXTURE_ALPHA_TYPE                            = C.GL_TEXTURE_ALPHA_TYPE
	TEXTURE_BINDING_1D_ARRAY                      = C.GL_TEXTURE_BINDING_1D_ARRAY
	TEXTURE_BINDING_2D_ARRAY                      = C.GL_TEXTURE_BINDING_2D_ARRAY
	TEXTURE_BLUE_TYPE                             = C.GL_TEXTURE_BLUE_TYPE
	TEXTURE_DEPTH_TYPE                            = C.GL_TEXTURE_DEPTH_TYPE
	TEXTURE_GREEN_TYPE                            = C.GL_TEXTURE_GREEN_TYPE
	TEXTURE_RED_TYPE                              = C.GL_TEXTURE_RED_TYPE
	TEXTURE_SHARED_SIZE                           = C.GL_TEXTURE_SHARED_SIZE
	TEXTURE_STENCIL_SIZE                          = C.GL_TEXTURE_STENCIL_SIZE
	TRANSFORM_FEEDBACK_BUFFER                     = C.GL_TRANSFORM_FEEDBACK_BUFFER
	TRANSFORM_FEEDBACK_BUFFER_BINDING             = C.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
	TRANSFORM_FEEDBACK_BUFFER_MODE                = C.GL_TRANSFORM_FEEDBACK_BUFFER_MODE
	TRANSFORM_FEEDBACK_BUFFER_SIZE                = C.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
	TRANSFORM_FEEDBACK_BUFFER_START               = C.GL_TRANSFORM_FEEDBACK_BUFFER_START
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         = C.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
	TRANSFORM_FEEDBACK_VARYINGS                   = C.GL_TRANSFORM_FEEDBACK_VARYINGS
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH         = C.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
	UNSIGNED_INT_10F_11F_11F_REV                  = C.GL_UNSIGNED_INT_10F_11F_11F_REV
	UNSIGNED_INT_24_8                             = C.GL_UNSIGNED_INT_24_8
	UNSIGNED_INT_5_9_9_9_REV                      = C.GL_UNSIGNED_INT_5_9_9_9_REV
	UNSIGNED_INT_SAMPLER_1D                       = C.GL_UNSIGNED_INT_SAMPLER_1D
	UNSIGNED_INT_SAMPLER_1D_ARRAY                 = C.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
	UNSIGNED_INT_SAMPLER_2D                       = C.GL_UNSIGNED_INT_SAMPLER_2D
	UNSIGNED_INT_SAMPLER_2D_ARRAY                 = C.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
	UNSIGNED_INT_SAMPLER_3D                       = C.GL_UNSIGNED_INT_SAMPLER_3D
	UNSIGNED_INT_SAMPLER_CUBE                     = C.GL_UNSIGNED_INT_SAMPLER_CUBE
	UNSIGNED_INT_VEC2                             = C.GL_UNSIGNED_INT_VEC2
	UNSIGNED_INT_VEC3                             = C.GL_UNSIGNED_INT_VEC3
	UNSIGNED_INT_VEC4                             = C.GL_UNSIGNED_INT_VEC4
	UNSIGNED_NORMALIZED                           = C.GL_UNSIGNED_NORMALIZED
	VERTEX_ARRAY_BINDING                          = C.GL_VERTEX_ARRAY_BINDING
	VERTEX_ATTRIB_ARRAY_INTEGER                   = C.GL_VERTEX_ATTRIB_ARRAY_INTEGER
)

// OpenGL 3.1
const (
	ACTIVE_UNIFORM_BLOCKS                       = C.GL_ACTIVE_UNIFORM_BLOCKS
	ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH        = C.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
	COPY_READ_BUFFER                            = C.GL_COPY_READ_BUFFER
	COPY_WRITE_BUFFER                           = C.GL_COPY_WRITE_BUFFER
	INT_SAMPLER_2D_RECT                         = C.GL_INT_SAMPLER_2D_RECT
	INT_SAMPLER_BUFFER                          = C.GL_INT_SAMPLER_BUFFER
	INVALID_INDEX                               = C.GL_INVALID_INDEX
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS    = C.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
	MAX_COMBINED_UNIFORM_BLOCKS                 = C.GL_MAX_COMBINED_UNIFORM_BLOCKS
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS      = C.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
	MAX_FRAGMENT_UNIFORM_BLOCKS                 = C.GL_MAX_FRAGMENT_UNIFORM_BLOCKS
	MAX_RECTANGLE_TEXTURE_SIZE                  = C.GL_MAX_RECTANGLE_TEXTURE_SIZE
	MAX_TEXTURE_BUFFER_SIZE                     = C.GL_MAX_TEXTURE_BUFFER_SIZE
	MAX_UNIFORM_BLOCK_SIZE                      = C.GL_MAX_UNIFORM_BLOCK_SIZE
	MAX_UNIFORM_BUFFER_BINDINGS                 = C.GL_MAX_UNIFORM_BUFFER_BINDINGS
	MAX_VERTEX_UNIFORM_BLOCKS                   = C.GL_MAX_VERTEX_UNIFORM_BLOCKS
	PRIMITIVE_RESTART                           = C.GL_PRIMITIVE_RESTART
	PRIMITIVE_RESTART_INDEX                     = C.GL_PRIMITIVE_RESTART_INDEX
	PROXY_TEXTURE_RECTANGLE                     = C.GL_PROXY_TEXTURE_RECTANGLE
	R16_SNORM                                   = C.GL_R16_SNORM
	R8_SNORM                                    = C.GL_R8_SNORM
	RG16_SNORM                                  = C.GL_RG16_SNORM
	RG8_SNORM                                   = C.GL_RG8_SNORM
	RGB16_SNORM                                 = C.GL_RGB16_SNORM
	RGB8_SNORM                                  = C.GL_RGB8_SNORM
	RGBA16_SNORM                                = C.GL_RGBA16_SNORM
	RGBA8_SNORM                                 = C.GL_RGBA8_SNORM
	SAMPLER_2D_RECT                             = C.GL_SAMPLER_2D_RECT
	SAMPLER_2D_RECT_SHADOW                      = C.GL_SAMPLER_2D_RECT_SHADOW
	SAMPLER_BUFFER                              = C.GL_SAMPLER_BUFFER
	SIGNED_NORMALIZED                           = C.GL_SIGNED_NORMALIZED
	TEXTURE_BINDING_BUFFER                      = C.GL_TEXTURE_BINDING_BUFFER
	TEXTURE_BINDING_RECTANGLE                   = C.GL_TEXTURE_BINDING_RECTANGLE
	TEXTURE_BUFFER                              = C.GL_TEXTURE_BUFFER
	TEXTURE_BUFFER_DATA_STORE_BINDING           = C.GL_TEXTURE_BUFFER_DATA_STORE_BINDING
	TEXTURE_RECTANGLE                           = C.GL_TEXTURE_RECTANGLE
	UNIFORM_ARRAY_STRIDE                        = C.GL_UNIFORM_ARRAY_STRIDE
	UNIFORM_BLOCK_ACTIVE_UNIFORMS               = C.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES        = C.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
	UNIFORM_BLOCK_BINDING                       = C.GL_UNIFORM_BLOCK_BINDING
	UNIFORM_BLOCK_DATA_SIZE                     = C.GL_UNIFORM_BLOCK_DATA_SIZE
	UNIFORM_BLOCK_INDEX                         = C.GL_UNIFORM_BLOCK_INDEX
	UNIFORM_BLOCK_NAME_LENGTH                   = C.GL_UNIFORM_BLOCK_NAME_LENGTH
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = C.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER   = C.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
	UNIFORM_BUFFER                              = C.GL_UNIFORM_BUFFER
	UNIFORM_BUFFER_BINDING                      = C.GL_UNIFORM_BUFFER_BINDING
	UNIFORM_BUFFER_OFFSET_ALIGNMENT             = C.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
	UNIFORM_BUFFER_SIZE                         = C.GL_UNIFORM_BUFFER_SIZE
	UNIFORM_BUFFER_START                        = C.GL_UNIFORM_BUFFER_START
	UNIFORM_IS_ROW_MAJOR                        = C.GL_UNIFORM_IS_ROW_MAJOR
	UNIFORM_MATRIX_STRIDE                       = C.GL_UNIFORM_MATRIX_STRIDE
	UNIFORM_NAME_LENGTH                         = C.GL_UNIFORM_NAME_LENGTH
	UNIFORM_OFFSET                              = C.GL_UNIFORM_OFFSET
	UNIFORM_SIZE                                = C.GL_UNIFORM_SIZE
	UNIFORM_TYPE                                = C.GL_UNIFORM_TYPE
	UNSIGNED_INT_SAMPLER_2D_RECT                = C.GL_UNSIGNED_INT_SAMPLER_2D_RECT
	UNSIGNED_INT_SAMPLER_BUFFER                 = C.GL_UNSIGNED_INT_SAMPLER_BUFFER
)

// OpenGL 3.2
const (
	ALREADY_SIGNALED                          = C.GL_ALREADY_SIGNALED
	CONDITION_SATISFIED                       = C.GL_CONDITION_SATISFIED
	CONTEXT_COMPATIBILITY_PROFILE_BIT         = C.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
	CONTEXT_CORE_PROFILE_BIT                  = C.GL_CONTEXT_CORE_PROFILE_BIT
	CONTEXT_PROFILE_MASK                      = C.GL_CONTEXT_PROFILE_MASK
	DEPTH_CLAMP                               = C.GL_DEPTH_CLAMP
	FIRST_VERTEX_CONVENTION                   = C.GL_FIRST_VERTEX_CONVENTION
	FRAMEBUFFER_ATTACHMENT_LAYERED            = C.GL_FRAMEBUFFER_ATTACHMENT_LAYERED
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS      = C.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
	GEOMETRY_INPUT_TYPE                       = C.GL_GEOMETRY_INPUT_TYPE
	GEOMETRY_OUTPUT_TYPE                      = C.GL_GEOMETRY_OUTPUT_TYPE
	GEOMETRY_SHADER                           = C.GL_GEOMETRY_SHADER
	GEOMETRY_VERTICES_OUT                     = C.GL_GEOMETRY_VERTICES_OUT
	INT_SAMPLER_2D_MULTISAMPLE                = C.GL_INT_SAMPLER_2D_MULTISAMPLE
	INT_SAMPLER_2D_MULTISAMPLE_ARRAY          = C.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
	LAST_VERTEX_CONVENTION                    = C.GL_LAST_VERTEX_CONVENTION
	LINES_ADJACENCY                           = C.GL_LINES_ADJACENCY
	LINE_STRIP_ADJACENCY                      = C.GL_LINE_STRIP_ADJACENCY
	MAX_COLOR_TEXTURE_SAMPLES                 = C.GL_MAX_COLOR_TEXTURE_SAMPLES
	MAX_DEPTH_TEXTURE_SAMPLES                 = C.GL_MAX_DEPTH_TEXTURE_SAMPLES
	MAX_FRAGMENT_INPUT_COMPONENTS             = C.GL_MAX_FRAGMENT_INPUT_COMPONENTS
	MAX_GEOMETRY_INPUT_COMPONENTS             = C.GL_MAX_GEOMETRY_INPUT_COMPONENTS
	MAX_GEOMETRY_OUTPUT_COMPONENTS            = C.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
	MAX_GEOMETRY_OUTPUT_VERTICES              = C.GL_MAX_GEOMETRY_OUTPUT_VERTICES
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS          = C.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS      = C.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
	MAX_GEOMETRY_UNIFORM_COMPONENTS           = C.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
	MAX_INTEGER_SAMPLES                       = C.GL_MAX_INTEGER_SAMPLES
	MAX_SAMPLE_MASK_WORDS                     = C.GL_MAX_SAMPLE_MASK_WORDS
	MAX_SERVER_WAIT_TIMEOUT                   = C.GL_MAX_SERVER_WAIT_TIMEOUT
	MAX_VERTEX_OUTPUT_COMPONENTS              = C.GL_MAX_VERTEX_OUTPUT_COMPONENTS
	OBJECT_TYPE                               = C.GL_OBJECT_TYPE
	PROGRAM_POINT_SIZE                        = C.GL_PROGRAM_POINT_SIZE
	PROVOKING_VERTEX                          = C.GL_PROVOKING_VERTEX
	PROXY_TEXTURE_2D_MULTISAMPLE              = C.GL_PROXY_TEXTURE_2D_MULTISAMPLE
	PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY        = C.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
	SAMPLER_2D_MULTISAMPLE                    = C.GL_SAMPLER_2D_MULTISAMPLE
	SAMPLER_2D_MULTISAMPLE_ARRAY              = C.GL_SAMPLER_2D_MULTISAMPLE_ARRAY
	SAMPLE_MASK                               = C.GL_SAMPLE_MASK
	SAMPLE_MASK_VALUE                         = C.GL_SAMPLE_MASK_VALUE
	SAMPLE_POSITION                           = C.GL_SAMPLE_POSITION
	SIGNALED                                  = C.GL_SIGNALED
	SYNC_CONDITION                            = C.GL_SYNC_CONDITION
	SYNC_FENCE                                = C.GL_SYNC_FENCE
	SYNC_FLAGS                                = C.GL_SYNC_FLAGS
	SYNC_FLUSH_COMMANDS_BIT                   = C.GL_SYNC_FLUSH_COMMANDS_BIT
	SYNC_GPU_COMMANDS_COMPLETE                = C.GL_SYNC_GPU_COMMANDS_COMPLETE
	SYNC_STATUS                               = C.GL_SYNC_STATUS
	TEXTURE_2D_MULTISAMPLE                    = C.GL_TEXTURE_2D_MULTISAMPLE
	TEXTURE_2D_MULTISAMPLE_ARRAY              = C.GL_TEXTURE_2D_MULTISAMPLE_ARRAY
	TEXTURE_BINDING_2D_MULTISAMPLE            = C.GL_TEXTURE_BINDING_2D_MULTISAMPLE
	TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY      = C.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
	TEXTURE_CUBE_MAP_SEAMLESS                 = C.GL_TEXTURE_CUBE_MAP_SEAMLESS
	TEXTURE_FIXED_SAMPLE_LOCATIONS            = C.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
	TEXTURE_SAMPLES                           = C.GL_TEXTURE_SAMPLES
	TIMEOUT_EXPIRED                           = C.GL_TIMEOUT_EXPIRED
	TIMEOUT_IGNORED                           = C.GL_TIMEOUT_IGNORED
	TRIANGLES_ADJACENCY                       = C.GL_TRIANGLES_ADJACENCY
	TRIANGLE_STRIP_ADJACENCY                  = C.GL_TRIANGLE_STRIP_ADJACENCY
	UNSIGNALED                                = C.GL_UNSIGNALED
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE       = C.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = C.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
	WAIT_FAILED                               = C.GL_WAIT_FAILED
)

// OpenGL 1.1

func CullFace(mode Enum) {
	C.glCullFace((C.GLenum)(mode))
}
func FrontFace(mode Enum) {
	C.glFrontFace((C.GLenum)(mode))
}
func Hint(target Enum, mode Enum) {
	C.glHint((C.GLenum)(target), (C.GLenum)(mode))
}
func LineWidth(width Float) {
	C.glLineWidth((C.GLfloat)(width))
}
func PointSize(size Float) {
	C.glPointSize((C.GLfloat)(size))
}
func PolygonMode(face Enum, mode Enum) {
	C.glPolygonMode((C.GLenum)(face), (C.GLenum)(mode))
}
func Scissor(x Int, y Int, width Sizei, height Sizei) {
	C.glScissor((C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func TexParameterf(target Enum, pname Enum, param Float) {
	C.glTexParameterf((C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func TexParameterfv(target Enum, pname Enum, params *Float) {
	C.glTexParameterfv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(params))
}
func TexParameteri(target Enum, pname Enum, param Int) {
	C.glTexParameteri((C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func TexParameteriv(target Enum, pname Enum, params *Int) {
	C.glTexParameteriv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func TexImage1D(target Enum, level Int, internalformat Int, width Sizei, border Int, format Enum, type_ Enum, pixels Pointer) {
	C.glTexImage1D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func TexImage2D(target Enum, level Int, internalformat Int, width Sizei, height Sizei, border Int, format Enum, type_ Enum, pixels Pointer) {
	C.glTexImage2D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func DrawBuffer(mode Enum) {
	C.glDrawBuffer((C.GLenum)(mode))
}
func Clear(mask Bitfield) {
	C.glClear((C.GLbitfield)(mask))
}
func ClearColor(red Float, green Float, blue Float, alpha Float) {
	C.glClearColor((C.GLclampf)(red), (C.GLclampf)(green), (C.GLclampf)(blue), (C.GLclampf)(alpha))
}
func ClearStencil(s Int) {
	C.glClearStencil((C.GLint)(s))
}
func ClearDepth(depth Double) {
	C.glClearDepth((C.GLclampd)(depth))
}
func StencilMask(mask Uint) {
	C.glStencilMask((C.GLuint)(mask))
}
func ColorMask(red Boolean, green Boolean, blue Boolean, alpha Boolean) {
	C.glColorMask((C.GLboolean)(red), (C.GLboolean)(green), (C.GLboolean)(blue), (C.GLboolean)(alpha))
}
func DepthMask(flag Boolean) {
	C.glDepthMask((C.GLboolean)(flag))
}
func Disable(cap Enum) {
	C.glDisable((C.GLenum)(cap))
}
func Enable(cap Enum) {
	C.glEnable((C.GLenum)(cap))
}
func Finish() {
	C.glFinish()
}
func Flush() {
	C.glFlush()
}
func BlendFunc(sfactor Enum, dfactor Enum) {
	C.glBlendFunc((C.GLenum)(sfactor), (C.GLenum)(dfactor))
}
func LogicOp(opcode Enum) {
	C.glLogicOp((C.GLenum)(opcode))
}
func StencilFunc(func_ Enum, ref Int, mask Uint) {
	C.glStencilFunc((C.GLenum)(func_), (C.GLint)(ref), (C.GLuint)(mask))
}
func StencilOp(fail Enum, zfail Enum, zpass Enum) {
	C.glStencilOp((C.GLenum)(fail), (C.GLenum)(zfail), (C.GLenum)(zpass))
}
func DepthFunc(func_ Enum) {
	C.glDepthFunc((C.GLenum)(func_))
}
func PixelStoref(pname Enum, param Float) {
	C.glPixelStoref((C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelStorei(pname Enum, param Int) {
	C.glPixelStorei((C.GLenum)(pname), (C.GLint)(param))
}
func ReadBuffer(mode Enum) {
	C.glReadBuffer((C.GLenum)(mode))
}
func ReadPixels(x Int, y Int, width Sizei, height Sizei, format Enum, type_ Enum, pixels Pointer) {
	C.glReadPixels((C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func GetBooleanv(pname Enum, params *Boolean) {
	C.glGetBooleanv((C.GLenum)(pname), (*C.GLboolean)(params))
}
func GetDoublev(pname Enum, params *Double) {
	C.glGetDoublev((C.GLenum)(pname), (*C.GLdouble)(params))
}
func GetError() Enum {
	return (Enum)(C.glGetError())
}
func GetFloatv(pname Enum, params *Float) {
	C.glGetFloatv((C.GLenum)(pname), (*C.GLfloat)(params))
}
func GetIntegerv(pname Enum, params *Int) {
	C.glGetIntegerv((C.GLenum)(pname), (*C.GLint)(params))
}
func GetString(name Enum) *Ubyte {
	return (*Ubyte)(C.glGetString((C.GLenum)(name)))
}
func GetTexImage(target Enum, level Int, format Enum, type_ Enum, pixels Pointer) {
	C.glGetTexImage((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func GetTexParameterfv(target Enum, pname Enum, params *Float) {
	C.glGetTexParameterfv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(params))
}
func GetTexParameteriv(target Enum, pname Enum, params *Int) {
	C.glGetTexParameteriv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetTexLevelParameterfv(target Enum, level Int, pname Enum, params *Float) {
	C.glGetTexLevelParameterfv((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(params))
}
func GetTexLevelParameteriv(target Enum, level Int, pname Enum, params *Int) {
	C.glGetTexLevelParameteriv((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(params))
}
func IsEnabled(cap Enum) Boolean {
	return (Boolean)(C.glIsEnabled((C.GLenum)(cap)))
}
func DepthRange(near_ Double, far_ Double) {
	C.glDepthRange((C.GLclampd)(near_), (C.GLclampd)(far_))
}
func Viewport(x Int, y Int, width Sizei, height Sizei) {
	C.glViewport((C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}

// OpenGL 1.1

func DrawArrays(mode Enum, first Int, count Sizei) {
	C.glDrawArrays((C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawElements(mode Enum, count Sizei, type_ Enum, indices Pointer) {
	C.glDrawElements((C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(type_), (unsafe.Pointer)(indices))
}
func PolygonOffset(factor Float, units Float) {
	C.glPolygonOffset((C.GLfloat)(factor), (C.GLfloat)(units))
}
func CopyTexImage1D(target Enum, level Int, internalformat Enum, x Int, y Int, width Sizei, border Int) {
	C.glCopyTexImage1D((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyTexImage2D(target Enum, level Int, internalformat Enum, x Int, y Int, width Sizei, height Sizei, border Int) {
	C.glCopyTexImage2D((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyTexSubImage1D(target Enum, level Int, xoffset Int, x Int, y Int, width Sizei) {
	C.glCopyTexSubImage1D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyTexSubImage2D(target Enum, level Int, xoffset Int, yoffset Int, x Int, y Int, width Sizei, height Sizei) {
	C.glCopyTexSubImage2D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func TexSubImage1D(target Enum, level Int, xoffset Int, width Sizei, format Enum, type_ Enum, pixels Pointer) {
	C.glTexSubImage1D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func TexSubImage2D(target Enum, level Int, xoffset Int, yoffset Int, width Sizei, height Sizei, format Enum, type_ Enum, pixels Pointer) {
	C.glTexSubImage2D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func BindTexture(target Enum, texture Texture) {
	C.glBindTexture((C.GLenum)(target), (C.GLuint)(texture))
}
func DeleteTextures(n Sizei, textures *Texture) {
	C.glDeleteTextures((C.GLsizei)(n), (*C.GLuint)(textures))
}
func GenTextures(n Sizei, textures *Texture) {
	C.glGenTextures((C.GLsizei)(n), (*C.GLuint)(textures))
}
func GenTexture() Texture {
	var texture Texture
	GenTextures(1, &texture)
	return (Texture)(texture)
}
func IsTexture(texture Texture) Boolean {
	return (Boolean)(C.glIsTexture((C.GLuint)(texture)))
}

// OpenGL 1.2

func BlendColor(red Float, green Float, blue Float, alpha Float) {
	C.glBlendColor((C.GLclampf)(red), (C.GLclampf)(green), (C.GLclampf)(blue), (C.GLclampf)(alpha))
}
func BlendEquation(mode Enum) {
	C.glBlendEquation((C.GLenum)(mode))
}
func DrawRangeElements(mode Enum, start Uint, end Uint, count Sizei, type_ Enum, indices Pointer) {
	C.glDrawRangeElements((C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(type_), (unsafe.Pointer)(indices))
}
func TexImage3D(target Enum, level Int, internalformat Int, width Sizei, height Sizei, depth Sizei, border Int, format Enum, type_ Enum, pixels Pointer) {
	C.glTexImage3D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func TexSubImage3D(target Enum, level Int, xoffset Int, yoffset Int, zoffset Int, width Sizei, height Sizei, depth Sizei, format Enum, type_ Enum, pixels Pointer) {
	C.glTexSubImage3D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(type_), (unsafe.Pointer)(pixels))
}
func CopyTexSubImage3D(target Enum, level Int, xoffset Int, yoffset Int, zoffset Int, x Int, y Int, width Sizei, height Sizei) {
	C.glCopyTexSubImage3D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}

// OpenGL 1.3

func ActiveTexture(texture Enum) {
	C.glActiveTexture((C.GLenum)(texture))
}
func SampleCoverage(value Float, invert Boolean) {
	C.glSampleCoverage((C.GLclampf)(value), (C.GLboolean)(invert))
}
func CompressedTexImage3D(target Enum, level Int, internalformat Enum, width Sizei, height Sizei, depth Sizei, border Int, imageSize Sizei, data Pointer) {
	C.glCompressedTexImage3D((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), (unsafe.Pointer)(data))
}
func CompressedTexImage2D(target Enum, level Int, internalformat Enum, width Sizei, height Sizei, border Int, imageSize Sizei, data Pointer) {
	C.glCompressedTexImage2D((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), (unsafe.Pointer)(data))
}
func CompressedTexImage1D(target Enum, level Int, internalformat Enum, width Sizei, border Int, imageSize Sizei, data Pointer) {
	C.glCompressedTexImage1D((C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), (unsafe.Pointer)(data))
}
func CompressedTexSubImage3D(target Enum, level Int, xoffset Int, yoffset Int, zoffset Int, width Sizei, height Sizei, depth Sizei, format Enum, imageSize Sizei, data Pointer) {
	C.glCompressedTexSubImage3D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), (unsafe.Pointer)(data))
}
func CompressedTexSubImage2D(target Enum, level Int, xoffset Int, yoffset Int, width Sizei, height Sizei, format Enum, imageSize Sizei, data Pointer) {
	C.glCompressedTexSubImage2D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), (unsafe.Pointer)(data))
}
func CompressedTexSubImage1D(target Enum, level Int, xoffset Int, width Sizei, format Enum, imageSize Sizei, data Pointer) {
	C.glCompressedTexSubImage1D((C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), (unsafe.Pointer)(data))
}
func GetCompressedTexImage(target Enum, level Int, img Pointer) {
	C.glGetCompressedTexImage((C.GLenum)(target), (C.GLint)(level), (unsafe.Pointer)(img))
}

// OpenGL 1.4

func BlendFuncSeparate(sfactorRGB Enum, dfactorRGB Enum, sfactorAlpha Enum, dfactorAlpha Enum) {
	C.glBlendFuncSeparate((C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func MultiDrawArrays(mode Enum, first *Int, count *Sizei, drawcount Sizei) {
	C.glMultiDrawArrays((C.GLenum)(mode), (*C.GLint)(first), (*C.GLsizei)(count), (C.GLsizei)(drawcount))
}
func MultiDrawElements(mode Enum, count *Sizei, type_ Enum, indices *Pointer, drawcount Sizei) {
	C.glMultiDrawElements((C.GLenum)(mode), (*C.GLsizei)(count), (C.GLenum)(type_), (*unsafe.Pointer)(indices), (C.GLsizei)(drawcount))
}
func PointParameterf(pname Enum, param Float) {
	C.glPointParameterf((C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfv(pname Enum, params *Float) {
	C.glPointParameterfv((C.GLenum)(pname), (*C.GLfloat)(params))
}
func PointParameteri(pname Enum, param Int) {
	C.glPointParameteri((C.GLenum)(pname), (C.GLint)(param))
}
func PointParameteriv(pname Enum, params *Int) {
	C.glPointParameteriv((C.GLenum)(pname), (*C.GLint)(params))
}

// OpenGL 1.5

func GenQueries(n Sizei, ids *Uint) {
	C.glGenQueries((C.GLsizei)(n), (*C.GLuint)(ids))
}
func DeleteQueries(n Sizei, ids *Uint) {
	C.glDeleteQueries((C.GLsizei)(n), (*C.GLuint)(ids))
}
func IsQuery(id Uint) Boolean {
	return (Boolean)(C.glIsQuery((C.GLuint)(id)))
}
func BeginQuery(target Enum, id Uint) {
	C.glBeginQuery((C.GLenum)(target), (C.GLuint)(id))
}
func EndQuery(target Enum) {
	C.glEndQuery((C.GLenum)(target))
}
func GetQueryiv(target Enum, pname Enum, params *Int) {
	C.glGetQueryiv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetQueryObjectiv(id Uint, pname Enum, params *Int) {
	C.glGetQueryObjectiv((C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetQueryObjectuiv(id Uint, pname Enum, params *Uint) {
	C.glGetQueryObjectuiv((C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(params))
}
func BindBuffer(target Enum, buffer Buffer) {
	C.glBindBuffer((C.GLenum)(target), (C.GLuint)(buffer))
}
func DeleteBuffers(n Sizei, buffers *Buffer) {
	C.glDeleteBuffers((C.GLsizei)(n), (*C.GLuint)(buffers))
}
func GenBuffers(n Sizei, buffers *Buffer) {
	C.glGenBuffers((C.GLsizei)(n), (*C.GLuint)(buffers))
}
func GenBuffer() Buffer {
	var buffer Buffer
	GenBuffers(1, &buffer)
	return (Buffer)(buffer)
}
func IsBuffer(buffer Buffer) Boolean {
	return (Boolean)(C.glIsBuffer((C.GLuint)(buffer)))
}
func BufferData(target Enum, size Sizeiptr, data Pointer, usage Enum) {
	C.glBufferData((C.GLenum)(target), (C.GLsizeiptr)(size), (unsafe.Pointer)(data), (C.GLenum)(usage))
}
func BufferSubData(target Enum, offset Intptr, size Sizeiptr, data Pointer) {
	C.glBufferSubData((C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size), (unsafe.Pointer)(data))
}
func GetBufferSubData(target Enum, offset Intptr, size Sizeiptr, data Pointer) {
	C.glGetBufferSubData((C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size), (unsafe.Pointer)(data))
}
func MapBuffer(target Enum, access Enum) Pointer {
	return (Pointer)(C.glMapBuffer((C.GLenum)(target), (C.GLenum)(access)))
}
func UnmapBuffer(target Enum) Boolean {
	return (Boolean)(C.glUnmapBuffer((C.GLenum)(target)))
}
func GetBufferParameteriv(target Enum, pname Enum, params *Int) {
	C.glGetBufferParameteriv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetBufferPointerv(target Enum, pname Enum, params *Pointer) {
	C.glGetBufferPointerv((C.GLenum)(target), (C.GLenum)(pname), (*unsafe.Pointer)(params))
}

// OpenGL 2.0

func BlendEquationSeparate(modeRGB Enum, modeAlpha Enum) {
	C.glBlendEquationSeparate((C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func DrawBuffers(n Sizei, bufs *Enum) {
	C.glDrawBuffers((C.GLsizei)(n), (*C.GLenum)(bufs))
}
func StencilOpSeparate(face Enum, sfail Enum, dpfail Enum, dppass Enum) {
	C.glStencilOpSeparate((C.GLenum)(face), (C.GLenum)(sfail), (C.GLenum)(dpfail), (C.GLenum)(dppass))
}
func StencilFuncSeparate(face Enum, func_ Enum, ref Int, mask Uint) {
	C.glStencilFuncSeparate((C.GLenum)(face), (C.GLenum)(func_), (C.GLint)(ref), (C.GLuint)(mask))
}
func StencilMaskSeparate(face Enum, mask Uint) {
	C.glStencilMaskSeparate((C.GLenum)(face), (C.GLuint)(mask))
}
func AttachShader(program Program, shader Uint) {
	C.glAttachShader((C.GLuint)(program), (C.GLuint)(shader))
}
func BindAttribLocation(program Program, index Uint, name string) {
	cName := glString(name)
	defer freeString(cName)
	C.glBindAttribLocation((C.GLuint)(program), (C.GLuint)(index), cName)
}
func CompileShader(shader Uint) {
	C.glCompileShader((C.GLuint)(shader))
}
func CreateProgram() Program {
	return (Program)(C.glCreateProgram())
}
func CreateShader(type_ Enum) Uint {
	return (Uint)(C.glCreateShader((C.GLenum)(type_)))
}
func DeleteProgram(program Program) {
	C.glDeleteProgram((C.GLuint)(program))
}
func DeleteShader(shader Uint) {
	C.glDeleteShader((C.GLuint)(shader))
}
func DetachShader(program Program, shader Uint) {
	C.glDetachShader((C.GLuint)(program), (C.GLuint)(shader))
}
func DisableVertexAttribArray(index AttributeLocation) {
	C.glDisableVertexAttribArray((C.GLuint)(index))
}
func EnableVertexAttribArray(index AttributeLocation) {
	C.glEnableVertexAttribArray((C.GLuint)(index))
}
func GetActiveAttrib(program Program, index Uint, bufSize Sizei, length *Sizei, size *Int, type_ *Enum, name string) {
	cName := glString(name)
	defer freeString(cName)
	C.glGetActiveAttrib((C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(length), (*C.GLint)(size), (*C.GLenum)(type_), cName)
}
func GetActiveUniform(program Program, index Uint, bufSize Sizei, length *Sizei, size *Int, type_ *Enum, name string) {
	cName := glString(name)
	defer freeString(cName)
	C.glGetActiveUniform((C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(length), (*C.GLint)(size), (*C.GLenum)(type_), cName)
}
func GetAttachedShaders(program Program, maxCount Sizei, count *Sizei, obj *Uint) {
	C.glGetAttachedShaders((C.GLuint)(program), (C.GLsizei)(maxCount), (*C.GLsizei)(count), (*C.GLuint)(obj))
}
func GetAttribLocation(program Program, name string) AttributeLocation {
	cName := glString(name)
	defer freeString(cName)
	return (AttributeLocation)(C.glGetAttribLocation((C.GLuint)(program), cName))
}
func GetProgramiv(program Program, pname Enum, params *Int) {
	C.glGetProgramiv((C.GLuint)(program), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetProgramInfoLog(program Program) string {
	var length Int
	GetProgramiv(program, INFO_LOG_LENGTH, &length)
	size := C.GLsizei(length)
	cInfoLog := cString(size)
	defer freeString(cInfoLog)
	C.glGetProgramInfoLog((C.GLuint)(program), size, &size, cInfoLog)
	return C.GoStringN((*C.char)(cInfoLog), C.int(size))
}
func GetShaderiv(shader Uint, pname Enum, params *Int) {
	C.glGetShaderiv((C.GLuint)(shader), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetShaderInfoLog(shader Uint) string {
	var length Int
	GetShaderiv(shader, INFO_LOG_LENGTH, &length)
	size := C.GLsizei(length)
	cInfoLog := cString(size)
	defer freeString(cInfoLog)
	C.glGetShaderInfoLog((C.GLuint)(shader), size, &size, cInfoLog)
	return C.GoStringN((*C.char)(cInfoLog), C.int(size))
}
func GetShaderSource(shader Uint, bufSize Sizei, length *Sizei, source string) {
	cSource := glString(source)
	defer freeString(cSource)
	C.glGetShaderSource((C.GLuint)(shader), (C.GLsizei)(bufSize), (*C.GLsizei)(length), cSource)
}
func GetUniformLocation(program Program, name string) UniformLocation {
	cName := glString(name)
	defer freeString(cName)
	return (UniformLocation)(C.glGetUniformLocation((C.GLuint)(program), cName))
}
func GetUniformfv(program Program, location UniformLocation, params *Float) {
	C.glGetUniformfv((C.GLuint)(program), (C.GLint)(location), (*C.GLfloat)(params))
}
func GetUniformiv(program Program, location UniformLocation, params *Int) {
	C.glGetUniformiv((C.GLuint)(program), (C.GLint)(location), (*C.GLint)(params))
}
func GetVertexAttribdv(index Uint, pname Enum, params *Double) {
	C.glGetVertexAttribdv((C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(params))
}
func GetVertexAttribfv(index Uint, pname Enum, params *Float) {
	C.glGetVertexAttribfv((C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(params))
}
func GetVertexAttribiv(index Uint, pname Enum, params *Int) {
	C.glGetVertexAttribiv((C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetVertexAttribPointerv(index Uint, pname Enum, pointer *Pointer) {
	C.glGetVertexAttribPointerv((C.GLuint)(index), (C.GLenum)(pname), (*unsafe.Pointer)(pointer))
}
func IsProgram(program Program) Boolean {
	return (Boolean)(C.glIsProgram((C.GLuint)(program)))
}
func IsShader(shader Uint) Boolean {
	return (Boolean)(C.glIsShader((C.GLuint)(shader)))
}
func LinkProgram(program Program) {
	C.glLinkProgram((C.GLuint)(program))
}
func ShaderSource(shader Uint, sources []string) {
	cSources := glStrings(sources...)
	defer freeGlStrings(cSources)
	cLengths := glLengths(sources)
	C.glShaderSource((C.GLuint)(shader), (C.GLsizei)(len(sources)), &cSources[0], &cLengths[0])
}
func UseProgram(program Program) {
	C.glUseProgram((C.GLuint)(program))
}
func Uniform1f(location UniformLocation, v0 Float) {
	C.glUniform1f((C.GLint)(location), (C.GLfloat)(v0))
}
func Uniform2f(location UniformLocation, v0 Float, v1 Float) {
	C.glUniform2f((C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
func Uniform3f(location UniformLocation, v0 Float, v1 Float, v2 Float) {
	C.glUniform3f((C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
func Uniform4f(location UniformLocation, v0 Float, v1 Float, v2 Float, v3 Float) {
	C.glUniform4f((C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
func Uniform1i(location UniformLocation, v0 Int) {
	C.glUniform1i((C.GLint)(location), (C.GLint)(v0))
}
func Uniform2i(location UniformLocation, v0 Int, v1 Int) {
	C.glUniform2i((C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
func Uniform3i(location UniformLocation, v0 Int, v1 Int, v2 Int) {
	C.glUniform3i((C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
func Uniform4i(location UniformLocation, v0 Int, v1 Int, v2 Int, v3 Int) {
	C.glUniform4i((C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
func Uniform1fv(location UniformLocation, count Sizei, value *Float) {
	C.glUniform1fv((C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(value))
}
func Uniform2fv(location UniformLocation, count Sizei, value *Float) {
	C.glUniform2fv((C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(value))
}
func Uniform3fv(location UniformLocation, count Sizei, value *Float) {
	C.glUniform3fv((C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(value))
}
func Uniform4fv(location UniformLocation, count Sizei, value *Float) {
	C.glUniform4fv((C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(value))
}
func Uniform1iv(location UniformLocation, count Sizei, value *Int) {
	C.glUniform1iv((C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(value))
}
func Uniform2iv(location UniformLocation, count Sizei, value *Int) {
	C.glUniform2iv((C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(value))
}
func Uniform3iv(location UniformLocation, count Sizei, value *Int) {
	C.glUniform3iv((C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(value))
}
func Uniform4iv(location UniformLocation, count Sizei, value *Int) {
	C.glUniform4iv((C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(value))
}
func UniformMatrix2fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix2fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix3fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix3fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix4fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix4fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func ValidateProgram(program Program) {
	C.glValidateProgram((C.GLuint)(program))
}
func VertexAttribPointer(index AttributeLocation, size Int, type_ Enum, normalized Boolean, stride Sizei, pointer Pointer) {
	C.glVertexAttribPointer((C.GLuint)(index), (C.GLint)(size), (C.GLenum)(type_), (C.GLboolean)(normalized), (C.GLsizei)(stride), (unsafe.Pointer)(pointer))
}

// OpenGL 2.1

func UniformMatrix2x3fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix2x3fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix3x2fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix3x2fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix2x4fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix2x4fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix4x2fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix4x2fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix3x4fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix3x4fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}
func UniformMatrix4x3fv(location UniformLocation, count Sizei, transpose Boolean, value *Float) {
	C.glUniformMatrix4x3fv((C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(transpose), (*C.GLfloat)(value))
}

// OpenGL 3.0

func ColorMaski(index Uint, r Boolean, g Boolean, b Boolean, a Boolean) {
	C.glColorMaski((C.GLuint)(index), (C.GLboolean)(r), (C.GLboolean)(g), (C.GLboolean)(b), (C.GLboolean)(a))
}
func GetBooleani_v(target Enum, index Uint, data *Boolean) {
	C.glGetBooleani_v((C.GLenum)(target), (C.GLuint)(index), (*C.GLboolean)(data))
}
func GetIntegeri_v(target Enum, index Uint, data *Int) {
	C.glGetIntegeri_v((C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(data))
}
func Enablei(target Enum, index Uint) {
	C.glEnablei((C.GLenum)(target), (C.GLuint)(index))
}
func Disablei(target Enum, index Uint) {
	C.glDisablei((C.GLenum)(target), (C.GLuint)(index))
}
func IsEnabledi(target Enum, index Uint) Boolean {
	return (Boolean)(C.glIsEnabledi((C.GLenum)(target), (C.GLuint)(index)))
}
func BeginTransformFeedback(primitiveMode Enum) {
	C.glBeginTransformFeedback((C.GLenum)(primitiveMode))
}
func EndTransformFeedback() {
	C.glEndTransformFeedback()
}
func BindBufferRange(target Enum, index Uint, buffer Buffer, offset Intptr, size Sizeiptr) {
	C.glBindBufferRange((C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func BindBufferBase(target Enum, index Uint, buffer Buffer) {
	C.glBindBufferBase((C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func TransformFeedbackVaryings(program Program, varyings []string, bufferMode Enum) {
	cVaryings := glStrings(varyings...)
	defer freeGlStrings(cVaryings)
	C.glTransformFeedbackVaryings((C.GLuint)(program), (C.GLsizei)(len(varyings)), &cVaryings[0], (C.GLenum)(bufferMode))
}
func GetTransformFeedbackVarying(program Program, index Uint, bufSize Sizei, length *Sizei, size *Sizei, type_ *Enum, name string) {
	cName := glString(name)
	defer freeString(cName)
	C.glGetTransformFeedbackVarying((C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(length), (*C.GLsizei)(size), (*C.GLenum)(type_), cName)
}
func ClampColor(target Enum, clamp Enum) {
	C.glClampColor((C.GLenum)(target), (C.GLenum)(clamp))
}
func BeginConditionalRender(id Uint, mode Enum) {
	C.glBeginConditionalRender((C.GLuint)(id), (C.GLenum)(mode))
}
func EndConditionalRender() {
	C.glEndConditionalRender()
}
func VertexAttribIPointer(index Uint, size Int, type_ Enum, stride Sizei, pointer Pointer) {
	C.glVertexAttribIPointer((C.GLuint)(index), (C.GLint)(size), (C.GLenum)(type_), (C.GLsizei)(stride), (unsafe.Pointer)(pointer))
}
func GetVertexAttribIiv(index Uint, pname Enum, params *Int) {
	C.glGetVertexAttribIiv((C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetVertexAttribIuiv(index Uint, pname Enum, params *Uint) {
	C.glGetVertexAttribIuiv((C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint)(params))
}
func VertexAttribI1i(index Uint, x Int) {
	C.glVertexAttribI1i((C.GLuint)(index), (C.GLint)(x))
}
func VertexAttribI2i(index Uint, x Int, y Int) {
	C.glVertexAttribI2i((C.GLuint)(index), (C.GLint)(x), (C.GLint)(y))
}
func VertexAttribI3i(index Uint, x Int, y Int, z Int) {
	C.glVertexAttribI3i((C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexAttribI4i(index Uint, x Int, y Int, z Int, w Int) {
	C.glVertexAttribI4i((C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexAttribI1ui(index Uint, x Uint) {
	C.glVertexAttribI1ui((C.GLuint)(index), (C.GLuint)(x))
}
func VertexAttribI2ui(index Uint, x Uint, y Uint) {
	C.glVertexAttribI2ui((C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y))
}
func VertexAttribI3ui(index Uint, x Uint, y Uint, z Uint) {
	C.glVertexAttribI3ui((C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z))
}
func VertexAttribI4ui(index Uint, x Uint, y Uint, z Uint, w Uint) {
	C.glVertexAttribI4ui((C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func VertexAttribI1iv(index Uint, v *Int) {
	C.glVertexAttribI1iv((C.GLuint)(index), (*C.GLint)(v))
}
func VertexAttribI2iv(index Uint, v *Int) {
	C.glVertexAttribI2iv((C.GLuint)(index), (*C.GLint)(v))
}
func VertexAttribI3iv(index Uint, v *Int) {
	C.glVertexAttribI3iv((C.GLuint)(index), (*C.GLint)(v))
}
func VertexAttribI4iv(index Uint, v *Int) {
	C.glVertexAttribI4iv((C.GLuint)(index), (*C.GLint)(v))
}
func VertexAttribI1uiv(index Uint, v *Uint) {
	C.glVertexAttribI1uiv((C.GLuint)(index), (*C.GLuint)(v))
}
func VertexAttribI2uiv(index Uint, v *Uint) {
	C.glVertexAttribI2uiv((C.GLuint)(index), (*C.GLuint)(v))
}
func VertexAttribI3uiv(index Uint, v *Uint) {
	C.glVertexAttribI3uiv((C.GLuint)(index), (*C.GLuint)(v))
}
func VertexAttribI4uiv(index Uint, v *Uint) {
	C.glVertexAttribI4uiv((C.GLuint)(index), (*C.GLuint)(v))
}
func VertexAttribI4bv(index Uint, v *Byte) {
	C.glVertexAttribI4bv((C.GLuint)(index), (*C.GLbyte)(v))
}
func VertexAttribI4sv(index Uint, v *Short) {
	C.glVertexAttribI4sv((C.GLuint)(index), (*C.GLshort)(v))
}
func VertexAttribI4ubv(index Uint, v *Ubyte) {
	C.glVertexAttribI4ubv((C.GLuint)(index), (*C.GLubyte)(v))
}
func VertexAttribI4usv(index Uint, v *Ushort) {
	C.glVertexAttribI4usv((C.GLuint)(index), (*C.GLushort)(v))
}
func GetUniformuiv(program Program, location UniformLocation, params *Uint) {
	C.glGetUniformuiv((C.GLuint)(program), (C.GLint)(location), (*C.GLuint)(params))
}
func BindFragDataLocation(program Program, color Uint, name string) {
	cName := glString(name)
	defer freeString(cName)
	C.glBindFragDataLocation((C.GLuint)(program), (C.GLuint)(color), cName)
}
func GetFragDataLocation(program Program, name string) Int {
	cName := glString(name)
	defer freeString(cName)
	return (Int)(C.glGetFragDataLocation((C.GLuint)(program), cName))
}
func Uniform1ui(location UniformLocation, v0 Uint) {
	C.glUniform1ui((C.GLint)(location), (C.GLuint)(v0))
}
func Uniform2ui(location UniformLocation, v0 Uint, v1 Uint) {
	C.glUniform2ui((C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
func Uniform3ui(location UniformLocation, v0 Uint, v1 Uint, v2 Uint) {
	C.glUniform3ui((C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
func Uniform4ui(location UniformLocation, v0 Uint, v1 Uint, v2 Uint, v3 Uint) {
	C.glUniform4ui((C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
func Uniform1uiv(location UniformLocation, count Sizei, value *Uint) {
	C.glUniform1uiv((C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(value))
}
func Uniform2uiv(location UniformLocation, count Sizei, value *Uint) {
	C.glUniform2uiv((C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(value))
}
func Uniform3uiv(location UniformLocation, count Sizei, value *Uint) {
	C.glUniform3uiv((C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(value))
}
func Uniform4uiv(location UniformLocation, count Sizei, value *Uint) {
	C.glUniform4uiv((C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(value))
}
func TexParameterIiv(target Enum, pname Enum, params *Int) {
	C.glTexParameterIiv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func TexParameterIuiv(target Enum, pname Enum, params *Uint) {
	C.glTexParameterIuiv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(params))
}
func GetTexParameterIiv(target Enum, pname Enum, params *Int) {
	C.glGetTexParameterIiv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetTexParameterIuiv(target Enum, pname Enum, params *Uint) {
	C.glGetTexParameterIuiv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(params))
}
func ClearBufferiv(buffer Enum, drawbuffer Int, value *Int) {
	C.glClearBufferiv((C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLint)(value))
}
func ClearBufferuiv(buffer Enum, drawbuffer Int, value *Uint) {
	C.glClearBufferuiv((C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLuint)(value))
}
func ClearBufferfv(buffer Enum, drawbuffer Int, value *Float) {
	C.glClearBufferfv((C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLfloat)(value))
}
func ClearBufferfi(buffer Enum, drawbuffer Int, depth Float, stencil Int) {
	C.glClearBufferfi((C.GLenum)(buffer), (C.GLint)(drawbuffer), (C.GLfloat)(depth), (C.GLint)(stencil))
}
func GetStringi(name Enum, index Uint) *Ubyte {
	return (*Ubyte)(C.glGetStringi((C.GLenum)(name), (C.GLuint)(index)))
}
func IsRenderbuffer(renderbuffer Buffer) Boolean {
	return (Boolean)(C.glIsRenderbuffer((C.GLuint)(renderbuffer)))
}
func BindRenderbuffer(target Enum, renderbuffer Buffer) {
	C.glBindRenderbuffer((C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func DeleteRenderbuffers(n Sizei, renderbuffers *Buffer) {
	C.glDeleteRenderbuffers((C.GLsizei)(n), (*C.GLuint)(renderbuffers))
}
func GenRenderbuffers(n Sizei, renderbuffers *Buffer) {
	C.glGenRenderbuffers((C.GLsizei)(n), (*C.GLuint)(renderbuffers))
}
func RenderbufferStorage(target Enum, internalformat Enum, width Sizei, height Sizei) {
	C.glRenderbufferStorage((C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func GetRenderbufferParameteriv(target Enum, pname Enum, params *Int) {
	C.glGetRenderbufferParameteriv((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(params))
}
func IsFramebuffer(framebuffer Buffer) Boolean {
	return (Boolean)(C.glIsFramebuffer((C.GLuint)(framebuffer)))
}
func BindFramebuffer(target Enum, framebuffer Buffer) {
	C.glBindFramebuffer((C.GLenum)(target), (C.GLuint)(framebuffer))
}
func DeleteFramebuffers(n Sizei, framebuffers *Buffer) {
	C.glDeleteFramebuffers((C.GLsizei)(n), (*C.GLuint)(framebuffers))
}
func GenFramebuffers(n Sizei, framebuffers *Buffer) {
	C.glGenFramebuffers((C.GLsizei)(n), (*C.GLuint)(framebuffers))
}
func CheckFramebufferStatus(target Enum) Enum {
	return (Enum)(C.glCheckFramebufferStatus((C.GLenum)(target)))
}
func FramebufferTexture1D(target Enum, attachment Enum, textarget Enum, texture Texture, level Int) {
	C.glFramebufferTexture1D((C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture2D(target Enum, attachment Enum, textarget Enum, texture Texture, level Int) {
	C.glFramebufferTexture2D((C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture3D(target Enum, attachment Enum, textarget Enum, texture Texture, level Int, zoffset Int) {
	C.glFramebufferTexture3D((C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func FramebufferRenderbuffer(target Enum, attachment Enum, renderbuffertarget Enum, renderbuffer Buffer) {
	C.glFramebufferRenderbuffer((C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
func GetFramebufferAttachmentParameteriv(target Enum, attachment Enum, pname Enum, params *Int) {
	C.glGetFramebufferAttachmentParameteriv((C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(params))
}
func GenerateMipmap(target Enum) {
	C.glGenerateMipmap((C.GLenum)(target))
}
func BlitFramebuffer(srcX0 Int, srcY0 Int, srcX1 Int, srcY1 Int, dstX0 Int, dstY0 Int, dstX1 Int, dstY1 Int, mask Bitfield, filter Enum) {
	C.glBlitFramebuffer((C.GLint)(srcX0), (C.GLint)(srcY0), (C.GLint)(srcX1), (C.GLint)(srcY1), (C.GLint)(dstX0), (C.GLint)(dstY0), (C.GLint)(dstX1), (C.GLint)(dstY1), (C.GLbitfield)(mask), (C.GLenum)(filter))
}
func RenderbufferStorageMultisample(target Enum, samples Sizei, internalformat Enum, width Sizei, height Sizei) {
	C.glRenderbufferStorageMultisample((C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func FramebufferTextureLayer(target Enum, attachment Enum, texture Texture, level Int, layer Int) {
	C.glFramebufferTextureLayer((C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func MapBufferRange(target Enum, offset Intptr, length Sizeiptr, access Bitfield) Pointer {
	return (Pointer)(C.glMapBufferRange((C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(length), (C.GLbitfield)(access)))
}
func FlushMappedBufferRange(target Enum, offset Intptr, length Sizeiptr) {
	C.glFlushMappedBufferRange((C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
func BindVertexArray(array VertexArrayObject) {
	C.glBindVertexArray((C.GLuint)(array))
}
func DeleteVertexArrays(n Sizei, arrays *VertexArrayObject) {
	C.glDeleteVertexArrays((C.GLsizei)(n), (*C.GLuint)(arrays))
}
func GenVertexArrays(n Sizei, arrays *VertexArrayObject) {
	C.glGenVertexArrays((C.GLsizei)(n), (*C.GLuint)(arrays))
}
func GenVertexArray() VertexArrayObject {
	var vao VertexArrayObject
	GenVertexArrays(1, &vao)
	return (VertexArrayObject)(vao)
}
func IsVertexArray(array VertexArrayObject) Boolean {
	return (Boolean)(C.glIsVertexArray((C.GLuint)(array)))
}

// OpenGL 3.1

func DrawArraysInstanced(mode Enum, first Int, count Sizei, instancecount Sizei) {
	C.glDrawArraysInstanced((C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(instancecount))
}
func DrawElementsInstanced(mode Enum, count Sizei, type_ Enum, indices Pointer, instancecount Sizei) {
	C.glDrawElementsInstanced((C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(type_), (unsafe.Pointer)(indices), (C.GLsizei)(instancecount))
}
func TexBuffer(target Enum, internalformat Enum, buffer Buffer) {
	C.glTexBuffer((C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func PrimitiveRestartIndex(index Uint) {
	C.glPrimitiveRestartIndex((C.GLuint)(index))
}
func CopyBufferSubData(readTarget Enum, writeTarget Enum, readOffset Intptr, writeOffset Intptr, size Sizeiptr) {
	C.glCopyBufferSubData((C.GLenum)(readTarget), (C.GLenum)(writeTarget), (C.GLintptr)(readOffset), (C.GLintptr)(writeOffset), (C.GLsizeiptr)(size))
}
func GetUniformIndices(program Program, uniformNames []string, uniformIndices *Uint) {
	cUniformNames := glStrings(uniformNames...)
	defer freeGlStrings(cUniformNames)
	C.glGetUniformIndices((C.GLuint)(program), (C.GLsizei)(len(uniformNames)), &cUniformNames[0], (*C.GLuint)(uniformIndices))
}
func GetActiveUniformsiv(program Program, uniformCount Sizei, uniformIndices *Uint, pname Enum, params *Int) {
	C.glGetActiveUniformsiv((C.GLuint)(program), (C.GLsizei)(uniformCount), (*C.GLuint)(uniformIndices), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetActiveUniformName(program Program, uniformIndex Uint, bufSize Sizei, length *Sizei, uniformname string) {
	cUniformName := glString(uniformname)
	defer freeString(cUniformName)
	C.glGetActiveUniformName((C.GLuint)(program), (C.GLuint)(uniformIndex), (C.GLsizei)(bufSize), (*C.GLsizei)(length), cUniformName)
}
func GetUniformBlockIndex(program Program, uniformBlockname string) Uint {
	cUniformBlockname := glString(uniformBlockname)
	defer freeString(cUniformBlockname)
	return (Uint)(C.glGetUniformBlockIndex((C.GLuint)(program), cUniformBlockname))
}
func GetActiveUniformBlockiv(program Program, uniformBlockIndex Uint, pname Enum, params *Int) {
	C.glGetActiveUniformBlockiv((C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLenum)(pname), (*C.GLint)(params))
}
func GetActiveUniformBlockName(program Program, uniformBlockIndex Uint, bufSize Sizei, length *Sizei, uniformBlockname string) {
	cUniformBlockname := glString(uniformBlockname)
	defer freeString(cUniformBlockname)
	C.glGetActiveUniformBlockName((C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLsizei)(bufSize), (*C.GLsizei)(length), cUniformBlockname)
}
func UniformBlockBinding(program Program, uniformBlockIndex Uint, uniformBlockBinding Uint) {
	C.glUniformBlockBinding((C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLuint)(uniformBlockBinding))
}

// OpenGL 3.2

func GetInteger64i_v(target Enum, index Uint, data *Int64) {
	C.glGetInteger64i_v((C.GLenum)(target), (C.GLuint)(index), (*C.GLint64)(data))
}
func GetBufferParameteri64v(target Enum, pname Enum, params *Int64) {
	C.glGetBufferParameteri64v((C.GLenum)(target), (C.GLenum)(pname), (*C.GLint64)(params))
}
func FramebufferTexture(target Enum, attachment Enum, texture Texture, level Int) {
	C.glFramebufferTexture((C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func DrawElementsBaseVertex(mode Enum, count Sizei, type_ Enum, indices Pointer, basevertex Int) {
	C.glDrawElementsBaseVertex((C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(type_), (unsafe.Pointer)(indices), (C.GLint)(basevertex))
}
func DrawRangeElementsBaseVertex(mode Enum, start Uint, end Uint, count Sizei, type_ Enum, indices Pointer, basevertex Int) {
	C.glDrawRangeElementsBaseVertex((C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(type_), (unsafe.Pointer)(indices), (C.GLint)(basevertex))
}
func DrawElementsInstancedBaseVertex(mode Enum, count Sizei, type_ Enum, indices Pointer, instancecount Sizei, basevertex Int) {
	C.glDrawElementsInstancedBaseVertex((C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(type_), (unsafe.Pointer)(indices), (C.GLsizei)(instancecount), (C.GLint)(basevertex))
}
func MultiDrawElementsBaseVertex(mode Enum, count *Sizei, type_ Enum, indices *Pointer, drawcount Sizei, basevertex *Int) {
	C.glMultiDrawElementsBaseVertex((C.GLenum)(mode), (*C.GLsizei)(count), (C.GLenum)(type_), (*unsafe.Pointer)(indices), (C.GLsizei)(drawcount), (*C.GLint)(basevertex))
}
func ProvokingVertex(mode Enum) {
	C.glProvokingVertex((C.GLenum)(mode))
}
func FenceSync(condition Enum, flags Bitfield) Sync {
	return (Sync)(C.glFenceSync((C.GLenum)(condition), (C.GLbitfield)(flags)))
}
func IsSync(sync Sync) Boolean {
	return (Boolean)(C.glIsSync((C.GLsync)(sync)))
}
func DeleteSync(sync Sync) {
	C.glDeleteSync((C.GLsync)(sync))
}
func ClientWaitSync(sync Sync, flags Bitfield, timeout Uint64) Enum {
	return (Enum)(C.glClientWaitSync((C.GLsync)(sync), (C.GLbitfield)(flags), (C.GLuint64)(timeout)))
}
func WaitSync(sync Sync, flags Bitfield, timeout Uint64) {
	C.glWaitSync((C.GLsync)(sync), (C.GLbitfield)(flags), (C.GLuint64)(timeout))
}
func GetInteger64v(pname Enum, params *Int64) {
	C.glGetInteger64v((C.GLenum)(pname), (*C.GLint64)(params))
}
func GetSynciv(sync Sync, pname Enum, bufSize Sizei, length *Sizei, values *Int) {
	C.glGetSynciv((C.GLsync)(sync), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLsizei)(length), (*C.GLint)(values))
}
func TexImage2DMultisample(target Enum, samples Sizei, internalformat Int, width Sizei, height Sizei, fixedsamplelocations Boolean) {
	C.glTexImage2DMultisample((C.GLenum)(target), (C.GLsizei)(samples), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(fixedsamplelocations))
}
func TexImage3DMultisample(target Enum, samples Sizei, internalformat Int, width Sizei, height Sizei, depth Sizei, fixedsamplelocations Boolean) {
	C.glTexImage3DMultisample((C.GLenum)(target), (C.GLsizei)(samples), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(fixedsamplelocations))
}
func GetMultisamplefv(pname Enum, index Uint, val *Float) {
	C.glGetMultisamplefv((C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(val))
}
func SampleMaski(index Uint, mask Bitfield) {
	C.glSampleMaski((C.GLuint)(index), (C.GLbitfield)(mask))
}

func glString(s string) *C.GLchar { return (*C.GLchar)(C.CString(s)) }

func freeString(ptr *C.GLchar) { C.free(unsafe.Pointer(ptr)) }

func cString(length C.GLsizei) *C.GLchar {
	return (*C.GLchar)(C.malloc(C.size_t(length)))
}

func glStrings(strs ...string) []*C.GLchar {
	strSlice := make([]*C.GLchar, len(strs))
	for i, s := range strs {
		strSlice[i] = (*C.GLchar)(C.CString(s))
	}
	return strSlice
}

func glLengths(strs []string) []C.GLint {
	lenSlice := make([]C.GLint, len(strs))
	for i, s := range strs {
		lenSlice[i] = C.GLint(len(s))
	}
	return lenSlice
}

func freeGlStrings(strs []*C.GLchar) {
	for _, s := range strs {
		C.free(unsafe.Pointer(s))
	}
}
